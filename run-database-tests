#!/usr/bin/env python3

import json
import os
import re
import shutil
import subprocess
import sys


def main():
	working_dir = None
	config_file = None

	if len(sys.argv) == 3:
		working_dir = sys.argv[1]
		config_file =  sys.argv[2]
	elif len(sys.argv) == 2:
		working_dir = sys.argv[1]
		config_file = 'testsuite.json'
	else:
		raise SystemExit('Usage: run-database-tests <working dir> [<testsuite config file>]')

	linksdir = os.getcwd()
	linksexec = os.path.join(linksdir,"links")

	verbose = False

	def debug(s):
		if verbose:
			print(s)

	def linkscmd(config,file):
		debug("%s --config=%s %s" % (linksexec,config,file))
		completed_process = subprocess.run([linksexec, "--config=%s" % config, file],
										   stdout=subprocess.PIPE,stderr=subprocess.PIPE)
		return completed_process.returncode

	matcher = re.compile("database_args=([^:]*):([^:]*):([^:]*):([^\n:]*)")
	def parsedbconfig(db):
		debug("Parsing config.%s" % db)
		with open("config.%s" % db) as fp:
			for line in fp:
				m = matcher.match(line)
				if m != None:
					return (m.group(1),m.group(2),m.group(3),m.group(4))
		return (None,None,None,None)

	def prepare(db,dbconfig,setup):
		(host, port, user, passwd) = dbconfig

		# if a specialized setup file exists for this database, use it
		sqlfile = "%s.%s" % (setup,db)
		# otherwise, use the plain sql one
		if not(os.path.exists("%s.%s" % (setup,db))):
			sqlfile = "%s.sql" % setup

		debug("setting up %s with %s" % (db,sqlfile))
		if db == 'pgsql':
			cmnd = "PGPASSWORD=%s psql -h %s -p %s %s -v ON_ERROR_STOP=1 -q -d links -f %s" % (passwd, host, port, user, sqlfile)
			debug(cmnd)
			returncode = os.system(cmnd)
			if returncode != 0:
				print(returncode)
				raise SystemExit("Database setup failed: %s for database %s" % (sqlfile,db))
		elif db == 'mysql':
			print("setting up %s %s" % (db,setup))
		elif db == 'sqlite3':
			print("setting up %s %s" % (db,setup))
		else:
			raise SystemExit("Unsupported database %s" % db)

	def run(db,test):
		debug("running %s %s" % (db,test))
		dbconfig = "config." + db
		testfile = test + ".links"
		returncode = linkscmd(dbconfig,testfile)
		if returncode != 0:
			print("!FAILURE: Test %s on database %s" % (test, db))
			return 1
		else:
			print("SUCCESS: Test %s on database %s" % (test, db))
			return 0


	os.chdir(working_dir)

	with open(config_file) as fp:
		config = json.load(fp)

	failed = False
	debug(config)
	for db in config['databases']:
		failures = 0
		dbconfig = parsedbconfig(db)
		print("%s: Setting up %s" % (working_dir,db))
		for setup in config['setups']:
			prepare(db,dbconfig,setup)
		print("%s: Testing %s" % (working_dir,db))
		for test in config['tests']:
			if run(db,test) > 0:
				failures = failures + 1
				failed = True
		print("%s: %d failures for %s" % (working_dir, failures, db))

	if failed:
		exit(1)
	else:
		exit(0)

if __name__ == '__main__':
	main()
