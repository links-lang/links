INSTALLATION OVERVIEW

To install Links, you'll need:

  * OCaml version 4.01.0 or later
  * A webserver that can run CGI programs

If you want to use a database, you should have the database as well as
the OCaml bindings for it. Database systems currently supported by
Links are PostgreSQL, MySQL, and SQLite.


INSTALLING OCAML AND LINKS

Links is written in OCaml and requires you to have an OCaml compiler installed
on your system.  The easiest way to install OCaml and Links is using OCaml's
package manager called OPAM.  Visit https://opam.ocaml.org/doc/Install.html and
follow instructions there to install OCaml.  Once you have OCaml compiler run:

  $ opam install links

This will install Links with all the required dependencies.


DERIVING

The Links source code depends on Jeremy Yallop's deriving library, now
maintained by the Ocsigen project. The easiest way to install it is
through the OCaml package manager OPAM. Having installed OPAM, do:

  opam install deriving

LWT, CONDUIT, COHTTP

The app server version of Links depends a number of third-party
libraries:

  opam install lwt conduit cohttp

BUILDING LINKS FROM SOURCE

To build, move to the Links source directory (wherever this INSTALL
file is) and run the following:

  $ make nc

Now you should have an executable in the current directory called
`links'.


RUNNING LINKS

Start up the interactive interpreter using:

  $ ./links

You should see a Links prompt like this:

  links>

Try evaluating some simple expressions. See the manual for more info
on writing Links expressions. Use

  links> @quit;

to exit the interactive interpreter.

In order to allow scrolling through the command history it is often
useful to invoke links in conjunction with rlwrap:

  $ rlwrap ./links

To run Links web applications, see RUNNING WEB APPLICATIONS, below.


RUNNING THE TESTS

To check whether Links is working under your platform, try running the
automated tests as follows:

  $ make tests

This should give you a lot of output.


INSTALLING LINKS FROM SOURCE

By default, Links looks for "prelude.links" in the current directory,
or at a location specified in the Links config file (which in turn
needs to be specified from the command line).  If you want to make
Links easy to run from anywhere on your system, do the following:

0.  Copy Makefile.sample.config to Makefile.config (if not already
    done).

1.  Edit Makefile.config to set LINKS_PREFIX, LINKS_BIN and LINKS_LIB
    variables to appropriate values.  The default is
    /usr/local/(bin|lib), which should work on most Unix systems.

2.  Do

      $ make install

    If you want to install to a global directory such as /usr/local, you
    need to have admin privileges when you do this.

3.  Finally, add an environment variable binding to set LINKS_LIB to the
    appropriate value chosen above.

      export LINKS_LIB=/usr/local/links/lib

    to .bash_profile.  From now on, whenever you start a new shell,
    you should be able to run Links wherever you are.

4.  If you want to uninstall or reinstall links, do "make uninstall"
    (optionally followed by "make install").


RUNNING WEB APPLICATIONS

Links works as an ordinary interpreter for CGI programs. To run a
Links web program, first make sure you have a working web server
that's configured to run CGI programs.

Here we illustrate an example configuration for Apache 2.

First make sure you've enabled modules 'cgid' and 'actions'.

Add the following to your apache config file (httpd.conf on standard
Apache installs, sites-enabled/000-default.conf on Debian-based
systems):


  # add a mime type for the .links file extension
  AddType text/links .links

Let's assume the web site is at the path /web, the links source
directory is at /src, and you want to put CGI scripts in /web/bin. To
allow CGI scripts to be executed under /web/bin we need to make sure
the ExecCGI option is set:

  <Directory /web/bin/>
    Options ExecCGI
    AddHandler cgi-script .cgi
    <Files "config">
      Order deny,allow
      Deny from all
    </Files>
  </Directory>

In order to handle .links files you need to define an action:

  <Directory /web>
    # Pass .links files to linkshandler.cgi
    Action text/links /web/bin/linkshandler.cgi
  </Directory>

and provide an appropriate implementation of linkshandler.cgi:

  #!/bin/bash
  exec links --config=config $PATH_TRANSLATED 2>> /web/log/links.log

This invokes links with a Links configuration file 'config', which
should also be in /web/bin, along with the path to the .links file
provided by the web server, and sends any error output to a log file.

A links configuration file consists of a list of name=value pairs on
separate lines. The particular setting we need to ensure smooth
running of Links as a CGI script is 'jsliburl':

  jsliburl=/lib

This should be set to a URL pointing to a directory containing the
Javascript libraries that Links depends on, which can be found in the
lib/js subdirectory of the Links source directory. A convenient way to
set this up is with a soft link to the source directory:

  $ ln -s /src/lib/js /web/lib

If you now create another soft link:

  $ ln -s /src/examples /web/examples

then you should be able to browse and run the example Links programs
(at least the ones that don't use the database) at:

  http://localhost/examples

(assuming your web server is running on your host machine).

If you create a second soft link to the examples directory:

  $ ln -s /src/examples /web/examplessrc

add a suitable handler for .links files under examplessrc:

  <Directory /web/examplessrc>
    # Pass .links files to linkssrchandler.cgi
    Action text/links /web/bin/linkssrchandler.cgi
  </Directory>

and create a corresponding CGI script linkssrchandler.cgi that simply
displays the source code:

  #!/bin/bash
  echo -e "Content-type: text/plain\n\n"

  if [[ -n $PATH_TRANSLATED ]];
    then cat $PATH_TRANSLATED;
  fi

then the source code links from the examples page should also function
correctly.

DATABASE SUPPORT

To use a database with Links, you'll need to have one of the following
database systems, and the associated OCaml bindings for that database:

  * MySQL
  * PostgreSQL
  * SQLite

To build Links with database support, follow these steps:

  1. Copy Makefile.sample.config to Makefile.config, and fill in the
     path to the appropriate OCaml database library (this refers to
     the OCaml bindings, not the library that came with the
     database). For example:

       POSTGRESQL_LIBDIR=/usr/lib/ocaml/postgreqsql

  2. If you need to link against the database libraries themselves,
     you can add these to the EXTRA_LIBDIRS line in Makefile.

     For example, on MacOS X, this setting can be used to include the
     PostgreSQL libraries:

       EXTRA_LIBDIRS=/usr/local/pgsql/lib

  3. Rebuild links with:

       make nc

  4. Augment the configuration file to point Links at your database
     instance.  To configure database access, the settings
     'database_driver' and 'database_args' should be set. The
     'database_driver' setting can take the values:

       'postgresql', 'mysql' or 'sqlite'

     The 'database_args' setting is only relevant for postgres, mysql and
     MonetDB.  It takes the form:

       <host>:<port>:<user>:<password>

     where the password and user may be blank.  If the user name is left blank
     it will be assumed to be the name of the user running the process.


EMACS MODE

There is a pretty minimal emacs mode in links-mode.el
To use it make sure emacs knows where to look for it, and require it.
For example:

  (add-to-list 'load-path "~/src/links") ; where ~/src/links is the directory containing links' sources
  (require 'links-mode)

C-c C-k will run links on the buffer's file. Be careful, this may have side effecs!

There are two customization options, the path to links and the command line arguments.
You might want to change the latter to suit your needs. From my emacs config:

(custom-set-variables
  '(links-cli-arguments "--config=config"))


QUESTIONS

To learn more about Links, get help with installing or using Links, or
connect with other Links programmers, join the links-users mailing
list. Just send a message containing the word "subscribe" to this
address:

  links-users@inf.ed.ac.uk
