typename IntSession = ?Int. ?Int. ?Int.End;
typename DelegSession = ?(IntSession).End;

module Client1 {

  fun go(ap) {
    debug("Got send end of delegation channel");
    var recvEnd = fork(fun(s) { var s = send(2, send(1, s)); sleep(2000); ignore(send(3, s)) });
    var delegSess = request(ap);
    var _ = send(recvEnd, delegSess);
    debug("Delegated receive end of session to server")
  }

  sig mainPage : (AP(DelegSession)) ~%e~> Page
  fun mainPage(ap) {
    var _  = spawnClient { go(ap) };
    page
      <#><html><body><h1>Hola (c1)</h1></body></html></#>
  }
}

module Client2 {

  fun go(ap) {
    var delegS = accept(ap);
    debug("Got receive end of delegation channel");
    var (s, _) = receive(delegS);
    debug("Got delegated channel");
    var (x1, s) = receive(s);
    debug (intToString(x1));
    var (x2, s) = receive(s);
    debug (intToString(x2));
    var (x3, s) = receive(s);
    debug (intToString(x3));
    go(ap)
  }

  sig mainPage : (AP(DelegSession)) ~%e~> Page
  fun mainPage(ap) {
    var _  = spawnClient { go(ap) };
    page
      <#><html><body><h1>Hola (c2)</h1></body></html></#>
  }
}

fun main() {
  var ap = new();
  addRoute("/c1", fun(_, _) { Client1.mainPage(ap) });
  addRoute("/c2", fun(_, _) { Client2.mainPage(ap) });
  serveWebsockets();
  servePages();
}

main()
