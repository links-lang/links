open ChatSessions
open ChatClient

## clientHandler loop: Reads incoming requests from the client, dispatches
## each command to the serverLoop which will broadcast to other session clients.
# Alas, we can't make this an inner function at the moment since we need a type
# annotation, and type annotations are broken for inner functions at the moment
fun clientHandlerLoop(nick, clientToServerChan, loopPid) {

  offer(clientToServerChan) {
    case ChatMessage(clientToServerChan) ->
      var (msg, clientToServerChan) = receive(clientToServerChan);
      loopPid ! BroadcastMessage(nick, msg);
      clientHandlerLoop(nick, clientToServerChan, loopPid)
    case ChangeTopic(clientToServerChan) ->
      var (newTopic, clientToServerChan) = receive(clientToServerChan);
      loopPid ! BroadcastChangeTopic(newTopic);
      clientHandlerLoop(nick, clientToServerChan, loopPid)
  }
}


# Process that is spawned to handle messages from the chat client.
fun clientHandler(nick, chatServerRecvEnd, serverToClientRecvEnd, loopPid) {

  # Get the current topic and nicks
  loopPid ! GetServerState(self());
  var (topic, nicks) = receive { case st -> st };

  # Send topic, nicks, and outgoing channel
  var chatServerRecvEnd =
    send((topic, nicks, serverToClientRecvEnd), chatServerRecvEnd);

  clientHandlerLoop(nick, chatServerRecvEnd, loopPid)
}

fun clientSendHandler(s) {
  receive {
    case DeliverMessage(nick, msg) ->
      var s = select IncomingChatMessage s;
      var s = send((nick, msg), s);
      clientSendHandler(s)
    case DeliverNewUser(nick) ->
      var s = select NewUser s;
      var s = send(nick, s);
      clientSendHandler(s)
    case DeliverNewTopic(topic) ->
      var s = select NewTopic s;
      var s = send(topic, s);
      clientSendHandler(s)
    case DeliverUserLeft(nick) ->
      var s = select UserLeft s;
      var s = send(nick, s);
      clientSendHandler(s)
  }
}

# Broadcasts a given message to the mailboxes of a list of PIDs
fun broadcastMessage(msg, pids) {
  switch(pids) {
    case [] -> ()
    case pid :: pids -> pid ! msg; broadcastMessage(msg, pids)
  }
}

# Main server loop, containing server state. Awaits (non-session) control
# messages to update the state, or broadcast instructions to send things
# along session channels.
fun serverLoop(topic, nicks, pids) {
  receive {
    case BroadcastMessage(nick, msg) ->
      broadcastMessage(DeliverMessage(nick, msg), pids);
      serverLoop(topic, nicks, pids)
    case BroadcastChangeTopic(newTopic) ->
      broadcastMessage(DeliverNewTopic(newTopic), pids);
      serverLoop(newTopic, nicks, pids)
    case NewClient(nick, pid) ->
      broadcastMessage(DeliverNewUser(nick), pids);
      serverLoop(topic, nick :: nicks, pid :: pids)
    case GetServerState(pid) ->
      pid ! (topic, nicks);
      serverLoop(topic, nicks, pids)
  }
}

fun handleNewClient(clientToServerRecvEnd, loopPid) {
  # Get the name and incoming message channel of the new client
  var (name, clientToServerRecvEnd) = receive(clientToServerRecvEnd);

  # Fork off the client handler,
  var serverToClientSendEnd = linFork(
    linfun (serverToClientRecvEnd) {
      clientHandler(name, clientToServerRecvEnd, serverToClientRecvEnd, loopPid)
  });

  # Fork off client send handler
  var clientSendHandlerPid = spawn { clientSendHandler(serverToClientSendEnd) };

  # Register with the main loop, and recurse
  loopPid ! NewClient(name, clientSendHandlerPid);
}

fun acceptor(ap, loopPid) server {
  # Accept a new client
  var clientToServerRecvEnd = accept(ap);
  var _ = spawn { handleNewClient(clientToServerRecvEnd, loopPid) };
  acceptor(ap, loopPid)
}

fun main() {
  var (clientAP:AP(ChatServer)) = new();
  var loopPid = spawn { serverLoop(Topic("Hello, ABCD!"), [], []) };
  var _ = spawn { acceptor(clientAP, loopPid) };
  addRoute("/", fun(_) { ChatClient.mainPage(clientAP) } );
  addStaticRoute("/css", "css", [("css", "text/css")]);
  serveWebsockets();
  servePages()
}

main()
