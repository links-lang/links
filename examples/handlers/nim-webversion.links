alien javascript "/js/domFunctions.js" {
    domAddStyleClassToRef: (DomNode, String) -> ();
    domRemoveStyleClassFromRef: (DomNode, String) -> ();
}

typename Player = [|Alice|Bob|You|];
typename Level = [|Easy|Medium|Hard|];
typename Cmd = [| StartGame | YourMove: Int| Restart|];
typename GameState = (player:(Player, Player), level: Level, cheat:Bool, heap:Int);
typename ViewState = [|Game: GameState|SetUp|Winner: Player|RestartSetUp|];

sig playerToString: (Player) -> String
fun playerToString(pl){
    switch(pl){
        case Bob -> "Bob"
        case Alice -> "Alice"
        case You -> "You"
    }
}

sig levelToString: (Level) -> String
fun levelToString(lev){
    switch(lev){
        case Easy -> "Easy"
        case Medium -> "Medium"
        case Hard -> "Hard"
    }
}

sig boolToString: (Bool) -> String
fun boolToString(b){
    if(b) "true"
    else "false"
}

sig viewStateToString: (ViewState) -> String
fun viewStateToString(view){
    switch(view){
        case Game(st) -> "Game"
        case SetUp -> "SetUp"
        case Winner(pl) -> "Winner"
        case RestartSetUp -> "RestartSetUp"
    }
}

sig stringToPlayer: (String) -> Player
fun stringToPlayer(st){
    switch(st){
        case "Alice" -> Alice
        case "Bob" -> Bob
        case "You" -> You
        case _ -> Alice
    }
}

sig stringToLevel: (String) -> Level
fun stringToLevel(st){
    switch(st){
        case "Easy" -> Easy
        case "Medium" -> Medium
        case "Hard" -> Hard
        case _ -> Easy
    }
}

sig stringToBool: (String) -> Bool
fun stringToBool(st){
    switch(st){
        case "true" -> true
        case "false" -> false
        case _ -> false
    }
}

sig setField: (a, String, (a) ~> String) ~%~> ()
fun setField(newVal, id, toString){
    domSetAttributeFromRef(getNodeById(id), "value", toString(newVal))
}

sig getField: (String) ~> String
fun getField(id){
    domGetAttributeFromRef(getNodeById(id), "value")
}

sig move: (Player, Int) {Move:(Player, Int) => Int|e}~> Int
fun move(pl, n){
    do Move(pl, n)
}

sig chooseRandom: ([Int]) ~> Int
fun chooseRandom(numbers){
    switch(numbers){
        case [] -> 0
        case [x] -> x
        case x::xs -> fun loop(xs, n, ret){
                        switch(xs){
                            case [] -> ret
                            case x::xs -> {
                                var rand = random();
                                if(rand <= intToFloat(1) /. intToFloat(n+1)){
                                    loop(xs, n+1, x)
                                } else{
                                    loop(xs, n+1, ret)
                                }
                            }
                        }
                    }
                    loop(xs, 1, 1)
    }
}

sig validMoves : (Int) -> [Int]
fun validMoves(n)
 { filter(fun(m) {m <= n}, [1,2,3]) }

# Strategies

sig hard: (Player, Int) -> Int
fun hard(pl, n){
    maximum(1, (n-1) `mod` 4)                   # Perfect strategy
}

sig medium: (Player, Int) ~> Int
fun medium(pl, n){
    chooseRandom(validMoves(n))                 # Take randomly 1,2, or 3 sticks
}

sig easy: (Player, Int) -> Int
fun easy(pl, n){
    1
}
# () for the suspended computation -> moveHandler returns a value so we need to thunk it. same as
# var pId = spawnClient{runState(fun(){moveHandler(gameProcess)}, (player=(Alice,Bob), level=Easy, cheat=false))};
sig moveHandler: (() {Move: (Player, Int) => Int, Restart: Zero, hear:Cmd|e}~> a, (Player, Int) ~%~> Int) -> () {Move-, hear:Cmd, Restart: Zero|e}~> a
fun moveHandler(f, s)(){
    handle(f()){
        case x -> x
        case <Move(pl, n) => resume> -> {
            switch (pl) {
                case You ->
                    switch(recv()){
                        case YourMove(x) -> resume(n-x)
                        case Restart -> switch(do Restart){}
                        case StartGame -> error("Startgame not possible from GamePage")
                    }
                case _ -> resume(n-s(pl, n))
            }
        }
    }
}

sig resetField: (Player, Player, Level, Bool, Int) ~> ()
fun resetField(pl1, pl2, lev, check, n){
    setField(pl1, "pl1", playerToString);
    setField(pl2, "pl2", playerToString);
    setField(lev, "level", levelToString);
    setField(check, "check", boolToString);
    setField(n, "heap", intToString)
}

sig getWinnerXml: (Process({hear:Cmd |e}), Player) ~> Xml
fun getWinnerXml(pId, pl){
    <#>
        <div class="width-list center margin-10">
            <p class="winner-heading">
            {
                switch(pl){
                    case You -> stringToXml("You have won!")
                    case _ -> stringToXml(playerToString(pl)^^ " has won!")
                }
            }
            </p>
        </div>
    </#>
}

sig buttonChosen: (String, String) ~> ()
fun buttonChosen(nodeId, data){
    var prevId = domGetAttributeFromRef(getNodeById(data), "value");
    if(prevId == nodeId) ()
    else if (prevId ==""){
        var node = getNodeById(nodeId);
        domAddStyleClassToRef(node, "selected-button");
        domSetAttributeFromRef(getNodeById(data), "value", nodeId)
    } else{
        var prevButton = getNodeById(prevId);
        domRemoveStyleClassFromRef(prevButton, "selected-button");
        #domSetStyleAttrFromRef(prevButton, "background-color", "#a6d8cc");
        var node = getNodeById(nodeId);
        domAddStyleClassToRef(node, "selected-button");
        domSetAttributeFromRef(getNodeById(data), "value", nodeId)
    }

}

sig parseNat: (String) ~> Maybe(Int)
fun parseNat(n){
    if (n =~ /^[0-9]+$/) {
        var m = stringToInt(n);
        if(m < 0){
            Nothing
        } else{
            Just(m)
        }
    } else{
        Nothing
    }
}

sig displayErrorMessage: (String, String) ~> ()
fun displayErrorMessage(id, msg){
    var messageNode = getNodeById(id);
    domReplaceChildren(stringToXml(msg), messageNode)
}

sig start: (Process ({ hear:Cmd | e})) ~> ()
fun start(pId){
    var num = parseNat(getInputValue("start-number"));
    switch(num){
        case Nothing -> {
            var heap = getField("heap");
            if(heap=="") displayErrorMessage("start-error-message", "Please enter a stack size in numbers into the field.")
            else pId ! StartGame
        }
        case Just(n) -> {
            setField(n, "heap", intToString);
            pId ! StartGame
        }
    }
}

sig getSetUpXml: (Process({hear:Cmd |e})) ~> Xml
fun getSetUpXml(pId){
        <#>
        <div id="setup-background" class="center">
        <div class="section centered-text"> Set up a new Game </div>

            <div class="field rounded-corners width-list center margin-10">
                <p class="text"> Choose the players: </p>
                <hr class="thin-grey width-100 center"/>
                <div class="sub-text margin-hor-10 font-10"> You can play against Alice or Bob, or watch Alice and Bob play against each other.</div>
                <div class="buttons center">
                    <button id="button-a" class="row-button rounded-corners margin-10 color-sec font-10 margin-all-4 selected-button" l:onclick="{
                        setField(Alice, "pl1", playerToString);
                        setField(You, "pl2", playerToString);
                        buttonChosen("button-a", "buttons-player")}"
                        >Alice vs You</button>
                    <button id="button-b" class="row-button rounded-corners margin-10 color-sec font-10 margin-all-4" l:onclick="{
                        setField(You, "pl1", playerToString);
                        setField(Bob, "pl2", playerToString);
                        buttonChosen("button-b", "buttons-player")}"
                        >You vs Bob</button>
                    <button id="button-c" class="row-button rounded-corners margin-10 color-sec font-10 margin-all-4" l:onclick="{
                        setField(Alice, "pl1", playerToString);
                        setField(Bob, "pl2", playerToString);
                        buttonChosen("button-c", "buttons-player")}"
                        >Alice vs Bob</button>
                </div>
                <div id="buttons-player" display="none" value="button-a"></div>
            </div>
            <div class="field rounded-corners width-list center margin-10">
                <p class="text"> Choose the difficulty: </p>
                <hr class="thin-grey width-100 center"/>
                <div class="sub-text margin-hor-10 font-10"> There are three different strategies for the opponent:
                <div class="display-left">
                    <div>
                        <ul class="sub-text-list bold"><li>Easy</li>
                        <li>Medium</li>
                        <li>Hard</li> </ul>
                    </div>
                    <div>
                        <ul class="sub-text-list"> <li>Always takes one stick.</li>
                        <li>Takes a random number of sticks.</li>
                        <li>Plays the perfect strategy.</li> </ul>
                    </div>
                    </div>
                </div>
                <div class="buttons center">
                    <button id="button-easy" class="row-button rounded-corners margin-10 color-sec font-10 margin-all-4 selected-button" l:onclick="{
                        setField(Easy, "level", levelToString);
                        buttonChosen("button-easy", "buttons-level")}"
                        >Easy</button>
                    <button id="button-medium" class="row-button rounded-corners margin-10 color-sec font-10 margin-all-4" l:onclick="{
                        setField(Medium, "level", levelToString);
                        buttonChosen("button-medium", "buttons-level")}"
                        >Medium</button>
                    <button id="button-hard" class="row-button rounded-corners margin-10 color-sec font-10 margin-all-4" l:onclick="{
                        setField(Hard, "level", levelToString);
                        buttonChosen("button-hard", "buttons-level")}"
                        >Hard</button>
                </div>
                <div id="buttons-level" display="none" value="button-easy"></div>
            </div>
            <div class="field rounded-corner width-list center margin-10">
                <p class="text"> Allow cheating: (TODO)</p>
                <hr class="thin-grey width-100 center"/>
                <div class="sub-text margin-hor-10 font-10">When cheating is allowed, the game will accept invalid moves. e.g. taking four sticks at once.</div>
                <div class="buttons center">
                    <button id="button-no" class="row-button rounded-corners margin-10 color-sec font-10 margin-all-4 selected-button" l:onclick="{
                        setField(false, "check", boolToString);
                        buttonChosen("button-no", "buttons-cheat")}"
                        >No</button>
                    <button id="button-yes" class="row-button rounded-corners margin-10 color-sec font-10 margin-all-4" l:onclick="{
                        setField(true, "check", boolToString);
                        buttonChosen("button-yes", "buttons-cheat")}"
                        >Yes</button>
                </div>
                <div id="buttons-cheat" display="none" value="button-no"></div>
            </div>
            <div class="field rounded-corners width-list center margin-10 display-flex">
                <p class="text">Please choose a heap size:</p>
                <input class="input-field rounded-corners font-10 margin-all-4" id="start-number" value="8" type="text" />
            </div>

            <p class="error-message centered-text center font-10 margin-10" id="start-error-message"></p>

            <button class="rounded-corners block row-button center color-accent" l:onclick="{start(pId)}"> Start Game </button>
            </div>

        </#>
}

sig addWinnerGif: () ~> ()
fun addWinnerGif(){
    var background = getNodeById("background");
    var body = getNodeById("body");
    domSetStyleAttrFromRef(body, "background-image", "url('https://media.giphy.com/media/IjmMzurYulKEw/giphy.gif')");
    domSetStyleAttrFromRef(body, "background-size", "cover");
    domSetStyleAttrFromRef(background, "background-color", "transparent");
    domAddStyleClassToRef(getNodeById("setUp"), "background-base");
    domAddStyleClassToRef(getNodeById("setUp"), "background-setup");
    domAddStyleClassToRef(getNodeById("setUp"), "rounded-corners")

}

sig removeWinnerGif: () ~> ()
fun removeWinnerGif(){
    var background = getNodeById("background");
    var body = getNodeById("body");
    domRemoveAttributeFromRef(body, "style");
    domSetStyleAttrFromRef(background, "background-color", "#f4f4f4");
    domRemoveStyleClassFromRef(getNodeById("setUp"), "background-setup");
    domRemoveStyleClassFromRef(getNodeById("setUp"), "background-base")
}

sig sendInput: (Process({ hear:Cmd |e})) {hear:Cmd |f}~> ()
fun sendInput(pId){
    var n = getInputValue("your-move");
    switch(parseNat(n)){
        case Nothing -> displayErrorMessage("game-error-message", "Please enter a stack size in numbers into the field.")
        case Just(m) -> pId ! YourMove(m)
    }
}

sig getGameXml: (Process ({hear:Cmd |e}) , GameState) ~%~> Xml
fun getGameXml(pId, gameState){
        <#>

            <div class="field rounded-corners width-list center margin-10">
                <div id="game-head" class="game-head center">
                    <div class="margin-10 width-90 center display-flex">
                        <span class="margin-10">Enter your Move </span>
                        <input class="input-field rounded-corners margin-10 font-10" placeholder="Enter your move" id="your-move" type="text" />
                        <button class="move-button rounded-corners font-10 color-sec margin-10" l:onclick="{sendInput(pId)}">Move</button>
                    </div>
                    <p class="error-message centered-text center margin-10" id="game-error-message"></p>
                    <hr class="thin-grey width-100 center"/>
                </div>
                <div class="game-view margin-10">
                    <div class="game-left game-boxes">
                        <div class="view-heading centered-text game-head-height"> Game Stats </div>
                        <p class="margin-left-25 sub-text font-10"> Players: {stringToXml(playerToString(gameState.player.1))} and {stringToXml(playerToString(gameState.player.2))}.</p>
                                                <hr class="thin-grey width-90 center"/>

                        <p class="margin-left-25 sub-text font-10"> Level: {stringToXml(levelToString(gameState.level))}</p>
                                                <hr class="thin-grey width-90 center"/>

                        <p class="margin-left-25 sub-text font-10"> Starting heap size: {intToXml(gameState.heap)}</p>
                    </div>
                    <div class="game-right game-boxes">
                        <div id="left-sticks" class="left-sticks centered-text game-head-height">{intToXml(gameState.heap)}</div>

                        <div id="game-steps" class="block"></div>
                    </div>
                </div>
            </div>
            <button id="restart-button" class="rounded-corners button block font-10 center" l:onclick="{pId ! Restart}"> Restart </button>
        </#>
}

sig renderView: (ViewState, Process({hear:Cmd |e})) ~> ()
fun renderView(view, pId){
    var gameview = getNodeById("game");
    var winner = getNodeById("winner");
    var setup = getNodeById("setUp");
    switch(view){
        case RestartSetUp -> domReplaceChildren(<#></#>, gameview); domReplaceChildren(getSetUpXml(pId), setup)
        case Game(state) ->  domReplaceChildren(<#></#>, setup); domReplaceChildren(<#></#>, winner); removeWinnerGif(); domReplaceChildren(getGameXml(pId, state), gameview)
        case SetUp -> domReplaceChildren(getSetUpXml(pId), setup)
        case Winner(pl) -> {
            domReplaceChildren(getWinnerXml(pId, pl), winner);
            domSetStyleAttrFromRef(getNodeById("game-head"), "display", "none");
            domSetStyleAttrFromRef(getNodeById("restart-button"), "display", "none")
            #domReplaceChildren(stringToXml("Play Again"), getNodeById("restart-button"))
        }
    }
}

sig restart: (Process({hear:Cmd |e})) ~> ()
fun restart(pId){
    resetField(Alice,You,Easy,false, 8);
    renderView(RestartSetUp, pId)
}

sig updateView: (Int, Int, Player) ~> ()
fun updateView(n, rest, cur){
    domReplaceChildren(intToXml(rest), getNodeById("left-sticks"));
    var step = {
        if(rest<=0){
            <#>
                <div>
                    <p class="steps centered-text bold font-10"> {stringToXml("End of Game.")}</p>
                </div>
            </#>
        } else{
            switch(cur){
                case You -> {<#>
                        <div>
                            <p class="steps centered-text font-10"> {stringToXml("You take "^^ intToString(n-rest)^^".")}</p>
                        </div>
                        <hr class="thin-grey width-90 center"/>
                    </#>}
                case _ -> {<#>
                        <div>
                            <p class="steps centered-text font-10"> {stringToXml(playerToString(cur) ^^" takes "^^ intToString(n-rest)^^".")}</p>
                        </div>
                        <hr class="thin-grey width-90 center"/>
                    </#>}
            }
        }
    };
    appendChildren(step, getNodeById("game-steps"))
}

sig turn: (Player, Player, Int) {Move: (Player, Int) => Int|e}~> Player
fun turn(cur, opp, n){
    if(n<= 0){
        cur                                 # Returns the winner
    } else{
        var rest = move(cur, n);
        updateView(n, {if(rest >= 0) rest else 0}, cur);
        turn(opp, cur, rest)
    }
}
sig game: () {Get: GameState, Move: (Player, Int) => Int, hear: Cmd |e}~> Player
fun game(){
    var st = do Get;
    renderView(Game(st), self());
    turn(st.player.1, st.player.2, st.heap)
}

sig runState : (() {Get:s, Set:(s) => () |e}~> a, s) -> () {Get-, Set- |e}~> (a, s)
fun runState(f, st0)(){
    handle(f())(st <- st0){
        case x -> (x, st)
        case <Set(st1) => resume> -> resume((), st1)
        case <Get => resume> -> resume(st, st)
    }
}

sig finishGame: (Player, Process({hear:Cmd|e})) ~> ()
fun finishGame(winner, pId){
    #add gif in background
    switch(winner){
        case You -> addWinnerGif()
        case (_) -> ()
    };
    renderView(Winner(winner), pId);
    renderView(SetUp, pId)
}

mutual {
  sig prepareGame: () ~%~> (Player, GameState)
  fun prepareGame(){
      var pl1 = stringToPlayer(getField("pl1"));
      var pl2 = stringToPlayer(getField("pl2"));
      var check = stringToBool(getField("check"));
      var level = stringToLevel(getField("level"));
      var heap = stringToInt(getField("heap"));
      var state = (player=(pl1, pl2), level=level, cheat=check, heap=heap);
      var moveHandler = switch(state.level){
          case Easy -> fun(game){moveHandler(game, easy)}
          case Medium -> fun(game){moveHandler(game, medium)}
          case Hard -> fun(game){moveHandler(game, hard)}
      };
      restartHandler(runState(moveHandler(game), state))
  }

  sig gameProcess : () {Get-,Move-,Restart{_},Set-,hear:Cmd|_}~> (Player, GameState)
  fun gameProcess(){
      var (winner, st) = receive {
          case YourMove(_) -> error("Unexpected input")                       # Move button is clicked
          case StartGame -> prepareGame()                                     # Start button is clicked, start the game
          case Restart ->  error("Restart not possible from setUp page")      # Restart button is clicked
      };
      finishGame(winner, self()) ;
      gameProcess()
  }

  sig restartHandler: (() ~%~> (Player, GameState)) ~%~> (Player, GameState)
  fun restartHandler(f){
      handle(f()){
          case x -> x
          case <Restart => k> -> restart(self()); gameProcess()
      }
  }
}
#handler
sig setPlayer : (Player, Player) {Get: GameState, Set: (GameState) => () |e}~> ()
fun setPlayer(pl1, pl2){
    var st = do Get;
    do Set((st with player=(pl1, pl2)))
}

sig setLevel : (Level) {Get:GameState, Set: (GameState) => () |e}~> ()
fun setLevel(lev){
    var st = do Get;
    do Set((st with level=lev))
}

sig setChecker : (Bool) {Get:GameState, Set: (GameState) => () |e}~> ()
fun setChecker(check){
    var st = do Get;
    do Set((st with cheat=check))
}

sig start: (Process ({ hear:Cmd | e})) ~> ()
fun start(pId){
    var num = parseNat(getInputValue("start-number"));
    switch(num){
        case Nothing -> {
            var heap = getField("heap");
            if(heap=="") displayErrorMessage("start-error-message", "Please enter a stack size in numbers into the field.")
            else pId ! StartGame
        }
        case Just(n) -> {
            setField(n, "heap", intToString);
            pId ! StartGame
        }
    }
}

sig main_page : (_) ~> Page
fun main_page(_) {
    var pId = spawnClient{gameProcess()};

    page
    <html>
    <head>
        <style>
        body{{
            font-size: 22px;
            font-family: Bookman, sans-serif;
            color: #3e0068;
        }}
        .background-base{{
            max-width: 1200px;
            min-width: 300px;
            background-color: #f4f4f4;
                margin: 0 auto;
        }}
        .background{{
            width: 80%;
            min-height: 100%;
        }}
        .background-setup{{
            width: 90%;
            margin-top: 50px;
        }}
        .top-heading{{
            padding-top: .9em;
            width: 75%;
            font-size: 3em;
            line-height: 100%;
            color: #c4005e;
            font-weight: bold;
            text-align: center;
        }}
        .section{{
            font-size: 35px;
            line-height: 100%;
            font-weight: bold;
            padding: 1.6em 0em .5em 0em
        }}
        .centered-text{{
            text-align: center;
        }}
        .center{{
            margin: 0 auto;
        }}
        .display-left{{
            display: flex;
            justify-content: left;
        }}
        .display-flex{{
            display: flex;
        }}
        .font-size-large{{
            font-size: 1.5em;
        }}
        .text-align-right{{
            text-align: right;
        }}
        .center-vertical{{
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
        }}
        .width-list{{
            width: 85%;
        }}
        .margin-10{{
            margin-top:10px;
            margin-bottom: 10px;
        }}
        .margin-hor-10{{
            margin: 10px 0;
        }}
        .margin-all-4{{
            margin:4px;
        }}
        .margin-0{{
            margin: 0;
        }}
        .margin-left-25{{
            margin-left: 25px;
        }}
        .font-10{{
            font-size: 18px;
        }}
        .block{{
            display: block;
        }}
        .width-100{{
            width: 100%;
        }}
        .width-90{{
            width: 90%;
        }}
        .buttons{{
            display:flex;
            justify-content: center;
            margin: 5px;
        }}
        .button{{
            height: 1.5em;
            width: 10%;
            min-width: 80px;
        }}
        .row-button{{
            width: 19%;
            min-width: 90px;
            height: 2.6em;
        }}
        .move-button{{
            width: 15%;
            height: 1.8em;
            margin-left: 20px;
            margin: right: 20px;
        }}
        .move-button:hover .row-button:hover{{
            background-color:#63b29e;
        }}
        .color-accent{{
            background-color: #c4005e;
            color: #FFFFFF;
            font-size: 20px;
        }}
        .color-sec{{
            background-color: #a6d8cc;
        }}
        .input-field{{
            margin: 10px 0px 10px 20px;
            background-color: #f2f2f2;
            color: #010b19;
            padding: .1em 2%;
            border: 1px solid #ccc;
            font-size: 15px;
            width: 30%;
            min-width: 55px;
        }}
        .rounded-corners{{
            border-radius: 5px;
        }}
        .thin-grey{{
            height: 1px;
            border: 0;
            border-top: 1px solid #b8b8b8;
            margin-top: 0;
            margin-bottom: 0;
            padding: 0;
        }}
        .thin-grey-start{{
            margin-top: 1em;
            margin-bottom: 1em;
        }}
        .field{{
            min-height: 2em;
            background-color: #ffffff;
            border: 1px solid #d4d4d4;
            padding: .2em 1.1em;
            clear: both;
            overflow: hidden;
        }}
        .game-view{{
            display: flex;
            justify-content: center;
        }}
        .game-left{{
            width: 39%;
            min-width 200px;
        }}
        .game-right{{
            width: 59%;
            min-width 300px;
        }}
        .game-boxes{{
            margin:2px;
        }}
        .error-message{{
            font-size: 20px;
            font-weight: bold;
            color: #cc0606;
        }}
        .game-head{{

        }}
        .game-head span{{
            align-self: flex-end;
        }}
        .left-sticks{{
            font-weight: bold;
            color: #c4005e;
        }}
        .game-head-height{{
            height: 45px;
            background-color: #a6d8cc;
            padding-top: 20px;
            font-size: 25px;
        }}
        .steps{{
            margin: 10px 10%;
        }}
        .winner-heading{{
            text-align: center;
            font-size: 60px;
            color: #ffcc00;
            font-weight: bold;
            line-height: 0;
            padding: 10px;
        }}
        .text{{
            margin-bottom: 10;
        }}
        .bold{{
            font-weight: bold;
        }}
        .sub-text{{
            padding: 0;
            color: #3d3d3d;
        }}
        .sub-text-list{{
            list-style: none;
            margin: 5px;
            padding: 0 20px;
        }}
        .information{{
            margin-top: 30px;
            margin-bottom: 25px;
            font-size: 20px;
        }}
        .selected-button {{
            border: 3px solid #c4005e;
            /* background-color: #75baa7; */
            /* color: white; */
            box-shadow: inset 0px 0px 5px #676767
        }}
        </style>
    </head>
    <body>
    <div id="body">
        <div id="background" class="background-base background center">
            <div class="top-heading center">
                 The Game of Nim
            </div>
            <hr class="thin-grey thin-grey-start width-90"/>

            <div id="winner"></div>
            <div id="game">
                <p class="width-list information center"> In the game of nim, two player take turns drawing sticks from a heap.
                For a correct move, a player would take one, two or three sticks from the heap.
                The player who takes the last stick loses. </p>
                <hr class="thin-grey width-90 center"/>
            </div>
            <div id="setUp">
                {getSetUpXml(pId)}
            </div>


        <div id="game-state" style="display: none;">
            <span id="pl1" value="Alice"></span>
            <span id="pl2" value="You"></span>
            <span id="level" value="Easy"></span>
            <span id="check" value="false"></span>
            <span id="heap" value="8"></span>
        </div>
        </div>
    </div>
    </body>
    </html>
}

sig main: () ~> ()
fun main() {
    addRoute("/", main_page);
    addStaticRoute("/js", "js", [("js", "text/javascript")]);
    servePages()
}

main()
