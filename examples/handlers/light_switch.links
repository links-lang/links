# Stateful operations
sig get : () {Get:s |_}-> s
fun get() {do Get}

sig put : (s) {Put:(s) => ()|_}-> ()
fun put(st) {do Put(st)}

#
# Light switch
#
typename LState = [|On|Off|];

# Toggle the light switch
sig toggle : Comp((), {Get:LState,Put:(LState) => ()|_})
fun toggle() {
  switch (get()) {
    case Off -> put(On)
    case On  -> put(Off)
  }
}

# Light fickering
fun flickering(n)() {
  if (n <= 0) ()
  else { toggle(); flickering(n-1)() }
}

# State gathering light flickering
fun flickering_st(n)() {
  if (n <= 0) []
  else { toggle(); get() :: flickering_st(n-1)() }
}

# Parameterised (deep) handlers are built-in
fun evalState(st, m) {
  handle(m())(st <- st) {
    case x -> x
    case <Get => resume> -> resume(st, st)
    case <Put(p) => resume> -> resume((), p)
  }
}

fun logState(m)() {
  handle(m())(history <- []) {
    case x -> (x, history)
    case <Put(p) => resume> -> resume(put(p), history ++ [p])
  }
}

# Parameterised handlers can be simulated via a technique known as parameter-passing
fun evalState0(st, m) {
  (handle(m()) {
    case x -> fun(_) { x }
    case <Get => resume> -> fun(st) { resume(st)(st) }
    case <Put(p) => resume> -> fun(_) { resume(())(p) }
  })(st)
}

# Unit test
fun unitTest(n) {
  var states  = evalState(Off, flickering_st(n));
  var states0 = evalState0(Off, flickering_st(n));

  var (_, log)  = evalState(Off, logState(flickering(n)));
  var (_, log0) = evalState0(Off, logState(flickering(n)));

  states == states0 && log == log0 && log == states
  #(states, states0, log, log0)
}
