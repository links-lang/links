# Deep encoding of pipes
# Adapted from Kammar et al. (2013)

typename Comp(e::Row,a) = () ~e~> a;

typename Producer(e::Row, a) = (()) ~e~> (Consumer(e, a)) ~e~> ();
typename Consumer(e::Row, a) = (a)  ~e~> (Producer(e, a)) ~e~> ();

typename Pump(e::Row,o)     = Comp({Yield:(o) {}-> () |e}, ());
typename Sink(e::Row,i)     = Comp({Await:i           |e}, ());
typename Pipe(e::Row,i,o)   = Comp({ |e}, ());

# Yield an element
sig yield : (a) {Yield:(a) {}-> ()|_}-> ()
fun yield(s) { do Yield(s) }

# Consume an element
sig await : () {Await:a |_}-> a
fun await() { do Await }

# Handles yield
sig up : (Comp( {Yield:(s) {}-> () |e}, ()))
                {Yield{yp}         |e}~>
      Comp( {Yield{yp}         |e}, (Consumer({Yield{yp} |e}, s)) {Yield{yp} |e}~> ())
fun up(m)() {
  handle(m()) {
    case Return(x)   -> fun(_) { x }
    case Yield(s, k) ->
      fun(cons : Consumer({Yield{yp} |e}, s)) {
          cons(s)(k)
          #cons(s)(fun() { k(()) })
      }
  }
}

# Swap argument order
sig up : (Consumer({Yield{yp} |e}, s)) -> (Pump({ |e}, s)) {Yield{yp} |e}~> ()
var up = fun(cons)(m) { up(m)()(cons) };

# Handles await
sig down : ( Comp( {Await:s |e}, ()) )
                   {Await{ap} |e}~>
             Comp( {Await{ap} |e}, (Producer({Await{ap} |e}, s)) {Await{ap} |e}~> ())
fun down(m)() {
  handle(m()) {
    case Return(x) -> fun(_) { x }
    case Await(k)  ->
     fun(prod : Producer({Await{ap} |e}, s)) {
         prod(())(k)
         #prod()(fun(s) { k(s) })
     }
  }
}

sig down : (Producer({Await{ap} |e}, s)) -> (Sink({ |e}, s)) {Await{ap} |e}~> ()
var down = fun(prod)(m) { down(m)()(prod) };

# Some combinators
# sig <+< : ( Comp({Await:s  , Yield{yp}          |e}, ())      # in: down
#           , Comp({Await{ap}, Yield:(s) {}-> ()  |e}, ()) ) -> # in: up
#           Comp({Await{ap}, Yield{yp}          |e}, ())      # out: pipe
sig <+< : (Sink({ Yield{yp} |e}, s), Pump({ Await{ap} |e}, s)) -> Pipe({ Await{ap}, Yield{yp} |e}, s, s)
op d <+< u {
  fun() { down(fun(())(cons) { up(cons)(u) })(d) }
}

# sig >+> : ( Comp({Await{ap}, Yield:(s) {}-> ()  |e}, ())      # in: up
#           , Comp({Await:s  , Yield{yp}          |e}, ()) ) -> # in: down
#           Comp({Await{ap}, Yield{yp}          |e}, ())      # out: pipe
sig >+> : ( Pump({ Await{ap} |e}, s), Sink({ Yield{yp} |e}, s)) -> Pipe({ Await{ap}, Yield{yp} |e}, s, s)
op u >+> d {
  d <+< u
}

# Some producers and consumers
# Produces an infinite stream of integers starting from [n] *)
#sig produceFrom : (Int) -> Comp({Yield:(Int) {}-> () |_}, ())
sig produceFrom : (Int) -> Pump({ |_}, Int)
fun produceFrom(n)() {
    yield(n);
    produceFrom(n+1)()
}

# Accumulates elements from an integer stream until the sum is greater than or equal to [n]
#sig sumTo : (Int) -> Comp({Await:Int, Yield:(Int) {}-> () |_}, ())
sig sumTo : (Int) -> Pipe({ Await:Int, Yield:(Int) {}-> () |_}, Int, Int)
fun sumTo(n)() {
  fun sumTo_aux(acc, lim) {
    if (acc >= lim) {
      yield(acc)
    } else {
      var x = await();
      sumTo_aux(acc+x, lim)
    }
  }
  sumTo_aux(0, n)
}

# Skips [n] elements from an arbitrary stream
#sig skip : (Int) -> Comp({Await:s, Yield:(s) {}-> () |_}, ())
sig skip : (Int) -> Pipe({ Await:s, Yield:(s) {}-> () |_}, s, s)
fun skip(n)() {
   if (n <= 0) { yield(await()); skip(0)() }
   else {
     var _ = await();
     skip(n-1)()
   }
}

# Turns a stream of as into a stream of bs
#sig converter : ((a) {Await:a, Yield:(b) {}-> () |e}~> b) -> Comp({Await:a,Yield:(b) {}-> () |e}, ())
sig converter : ((a) {Await:a, Yield:(b) {}-> () |e}~> b) -> Pipe({ Await:a, Yield:(b) {}-> () |e}, a, b)
fun converter(conv)() {
    var b = conv(await());
    yield(b);
    converter(conv)()
}

# Prints a stream of as
#sig printer : ((a) {Await:a |e}~> String) -> Comp({Await:a |e}, ())
sig printer : ((a) {Await:a |e}~> String) -> Sink({ |e}, a)
fun printer(toString)() {
    var n = await();
    print(toString(n));
    printer(toString)()
}

# Examples
fun example() {
  ( printer(id)               # sink
 <+<
    converter(floatToString)  # yields STRING
 <+<
    converter(intToFloat)     # yields FLOAT
 <+<
    sumTo(100)                # yields INT
 <+<
    produceFrom(0)            # yields INT
  )()
}

fun example2() {
  ( produceFrom(0)            # yields INT
 >+>
    skip(99)                  # yields INT
 >+>
    sumTo(100)                # yields INT
 >+>
    converter(intToFloat)     # yields FLOAT
 >+>
    converter(floatToString)  # yields STRING
 >+>
    printer(id)               # sink
 ) ()
}

# End
#sig end : Sink({Await:a |e}, a)
fun end() {await()}

fun unitTest(n) {
  handle(
   ( produceFrom(n)           # yields INT
 >+>
    skip(99)                  # yields INT
 >+>
    sumTo(100)                # yields INT
 >+>
    converter(intToFloat)     # yields FLOAT
 >+>
    converter(floatToString)  # yields STRING
  ) ()) {
    case Return(_)  -> error("Unexpected return.")
    case Await(_,_) -> error("Unexpected await.")
    case Yield(x,_) -> x
  }
}
