# Nim game (https://en.wikipedia.org/wiki/Nim)
# This example is adapted from Kammar et al. (2013)
#     (https://github.com/slindley/effect-handlers)
#
# Mathematical game Nim
#
# Rules:
#  - Two players: Alice and Bob; Alice always starts.
#  - One heap of N sticks.
#  - Turn-based, one move per turn.
#  - A player may pick between 1-3 sticks at each turn.
#  - The player, who takes the last stick, wins.
#

# Datatype modelling the players
typename Player = [|Alice|Bob|];

# String of player
sig showPlayer : (Player) -> String
fun showPlayer(player) {
  switch (player) {
    case Alice -> "Alice"
    case Bob   -> "Bob"
  }
}

# Abstract operation "Move"
# Models a player picking a number of sticks
# The operation takes the current game configuration as input
sig move : (Player,Int) {Move:(Player,Int) {}-> Int|_}~> Int
fun move(player,n) {do Move(player,n)}


# We model the game as two mutual recursive functions
sig aliceTurn : (Int) {Move:(Player,Int) {}-> Int|_}~> Player
fun aliceTurn(n) {
  if (n == 0) {Bob} # Bob wins
  else {bobTurn( n - move(Alice,n) )}
}

# Similarly, we define bobTurn
sig bobTurn : (Int) {Move:(Player,Int) {}-> Int|_}~> Player
fun bobTurn(n) {
  if (n == 0) {Alice} # Alice wins
  else {aliceTurn( n - move(Bob,n) )}
}

# A game is parameterised by the number of starting sticks,
# moreover it enforces the rule that Alice always starts
sig game : (Int) -> Comp({Move:(Player,Int) {}-> Int|_},Player)
fun game(n)() {aliceTurn(n)}

#
# Encoding players' strategies as handlers
#
# An interpretation of Move corresponds to assigning a particular
# strategy to a given player

# Type alias for strategy handlers
typename StratCont(e::Row, a::Type) = (Int) ~e~> a;
typename StrategyHandler = forall a :: Type, p :: Presence .
                           (Comp({Move:(Player,Int) {}-> Int},a)) {Move{p}}~> a;
typename Strategy = forall a :: Type, p :: Presence, e :: Row, f :: Row .
                           (Int,StratCont({Move{p}|f},a)) {Move{p}|e}~> a;


typename Cont(a::Type,b::Type) = forall e :: Row . (a) ~e~> b;
typename Strategy2 = forall e :: Row, a :: Type . (Int, Cont(Int, a)) ~e~> a;

# A first strategy: Always pick one stick
sig ns : Strategy
fun ns(n,k) { k(1) }

# The naive-strategy-handler assigns the naive-strategy to both players
sig naive : StrategyHandler
handler naive(m) {
  case Move(_,n,k) -> ns(n,k)
  case Return(x)   -> x
}

# Observation: When both players are playing the naive-strategy, the
# winner is determined by the parity of the number of sticks at the beginning.


# Auxiliary function
# Given two comparable inputs, it returns the greatest of those two.
sig max2 : (a,a) -> a
fun max2(x,y) {
  if (x > y) {x}
  else {y}
}


# The perfect strategy is to pick "max{n (mod 4), 1}" sticks
#sig ps : Strategy
sig ps : (Int, (Int) ~e~> a) ~e~> a
#sig ps : Strategy2
fun ps(n,k) {
    k(max2(n `mod` 4, 1))
}

# The perfect handler assigns the perfect strategy to both players
#sig perfect : StrategyHandler
sig perfect : (Comp({Move:(Player,Int) {}-> Int}, a)) {Move{_}}~> a
handler perfect(m) {
    case Move(_,n,k) -> ps(n,k)
    case Return(x)   -> x
}

# Observation: Alice wins whenever the starting number of sticks are not divisible by 4
# under the interpretation of perfect.


# Auxiliary function.
# Given the number of sticks n it returns a list of valid moves.
sig validMoves : (Int) -> [Int]
fun validMoves(n) {
    filter(fun(m) { m <= n }, [1..3])
}

# The brute force strategy enumerates all future plays
# if any particular play leads to a win, then play that strategy
#sig bfs : (a,Int,(Int) {Move:(Player,Int) {}-> Int|e}~> a)
#                       {Move:(Player,Int) {}-> Int|e}~> a
sig bfs : (a, Int, (Int) ~e~> a)
                         ~e~> a
fun bfs(player,n,k) {
  # Map the continuation over all possible moves
  # this effectively determines all potential winners
  var winners = map(k, validMoves(n));
  # Ask whether 'player' is among the potential winners
  var hasPlayerWon = elemIndex(player, winners);
  switch (hasPlayerWon) {
    case Nothing -> k(1)   # Not winning. Default to pick one stick.
    case Just(i) -> k(i+1) # Among winners; play the winning-strategy.
  }
}

# The perfect vs brute force handler assigns
# Alice the perfect strategy and Bob the brute force strategy
#sig pvb : StrategyHandler
sig pvb : (Comp({Move:(Player,Int) {}-> Int}, Player)) {}~> Player
handler pvb(m) {
  case Move(Alice,n,k) -> ps(n,k)
  case Move(Bob,n,k)   -> bfs(Bob,n,k)
  case Return(x)       -> x : Player
}


#
# Computing game data
#
# Instead of simply evaluating the winner according to some strategy,
# we can also compute other data. For instance, we can compute a tree
# representing the possible moves of each player.

# Game tree data type
typename GameTree =
  [| Take   : (Player, [(Int, GameTree)])  # Intermediate node
   | Winner : Player                       # Leaf
   |];

# Reify a move as part of the move tree
sig reifyMove : (Player, Int, (Int) ~e~> GameTree) ~e~> GameTree
fun reifyMove(player, n, k) {
  # Mapping the continuation over the possible moves
  # enumerates all the subgames from current game configuration
  var subgames = map(k, validMoves(n));
  # Next, we reify the subgames as subtrees in the game tree
  var subtrees = zip([1..3], subgames);
  Take(player, subtrees)
}

# Complete game tree generator
# The Return-case lifts the result of the computation, m, into a leaf in the game tree
sig gametree : (Comp({Move:(Player, Int) {}-> Int}, Player)) {}~> GameTree
handler gametree(m) {
  case Return(x)          -> Winner(x)
  case Move(player, n, k) -> reifyMove(player, n, k)
}

# links> gametree(game(3))
#  Take((Alice, [(1, Take((Bob, [(1, Take((Alice, [(1, Winner(Alice))]))),
#                                (2, Winner(Bob))]))),
#                  (2, Take((Bob, [(1, Winner(Bob))]))),
#                  (3, Winner(Alice))]))


#
# Open handlers
#


#
# Generate a game tree in which Bob plays a particular strategy
#
sig bobStrat : (Comp({Move:(Player, Int) {}-> Int|e}, Player  )) ->
                Comp({Move:(Player, Int) {}-> Int|e}, GameTree)
open handler bobStrat(m) {
     case Return(x)          -> Winner(x)
     case Move(Bob, n, k)    -> {
           var take = move(Bob,n); # Explicit forwarding of move
           var tree = k(take);
      Take(Bob, [(take, tree)])
     }
     case Move(player, n, k) -> reifyMove(player, n, k)
}

# We can reuse our closed handler perfect to interpret the forwarded move-operation.
# Note, the handler composition order matters here, because perfect is defined for Alice,
# we wish only to play the perfect strategy for Bob, therefore perfect must be on top of
# the handler stack.
# links> perfect(bobStrat(game(3)))
#  Take((Alice, [(1, Take((Bob, [(2, Winner(Bob))]))),
#                (2, Take((Bob, [(1, Winner(Bob))]))),
#                (3, Winner(Alice))]))



#
# Power of Composition
#

#
# Extending the game with a cheat detection mechanism
#

# Abstract operation cheat
# Invoked when a player cheats.
sig cheat : (Player,Int) {Cheat:(Player,Int) {}-> Zero|_}~> a
fun cheat(player, n) {switch(do Cheat(player,n)) { } }

# Cheater's strategy is to take all sticks and thereby win in one move
sig cheater : Strategy
fun cheater(n,k) {k(n)}

sig cheater2 : Strategy
fun cheater2(n,k) {
  if (n > 3) { k(0) }
  else { k(n) }
}

# checkMove checks whether a given player p has cheated
sig checkMove : (Player,Int,
                (Int) {Move:(Player,Int) {}-> Int,Cheat:(Player,Int) {}-> Zero|e}~> a) # k signature
              {Move:(Player,Int) {}-> Int,Cheat:(Player,Int) {}-> Zero|e}~> a  # Effects + return type
fun checkMove(p,n,k) {
  var take = move(p,n);
  #if (take < 1 || 3 < take) { # Cheater detected!
  if (not(elem(take,validMoves(n)))) {
     cheat(p, take)
  } else {
     k(take)                  # Otherwise OK
  }
}

# The check handler detects cheating
sig check : (Comp({Move:(Player,Int) {}-> Int, Cheat:(Player,Int) {}-> Zero|e}, a)) ->
             Comp({Move:(Player,Int) {}-> Int, Cheat:(Player,Int) {}-> Zero|e}, a)
open handler check(m) {
  case Return(x)          -> x
  case Move(player, n, k) -> checkMove(player, n, k)
}


# Convenient function to launch a checked game
sig checkedGame : (Int) ->
                  Comp ({Move :(Player, Int) {}-> Int,
                 Cheat:(Player, Int) {}-> Zero|e}, Player)
fun checkedGame(n) { check(game(n)) }

# aliceCheats assigns Alice the cheater's strategy
sig aliceCheats : (Comp({Move:(Player,Int) {}-> Int|e}, a)) ->
                   Comp({Move:(Player,Int) {}-> Int|e}, a)
open handler aliceCheats(m) {
  case Move(Alice,n,k) -> cheater(n,k)
  case Move(Bob,n,k)   -> k(move(Bob,n))     # Explicit forwarding is required if we insist on using type signatures
  case Return(x)       -> x
}

sig aliceCheats2 : (Comp({Move:(Player,Int) {}-> Int|e}, a)) ->
                    Comp({Move:(Player,Int) {}-> Int|e}, a)
open handler aliceCheats2(m) {
  case Move(Alice,n,k) -> cheater2(n,k)
  case Move(Bob,n,k)   -> k(move(Bob,n))     # Explicit forwarding is required if we insist on using type signatures
  case Return(x)       -> x
}

# links> perfect(aliceCheats(game(36)))
#  Alice

# Interpreting cheating
# Abandon the game and report the cheater
sig cheatReport : (Comp({Cheat:(Player,Int) {}-> Zero|e}, a)) ->
                   Comp({Cheat{_}|e}, a)
open handler cheatReport(m) {
  case Cheat(p,n,_) -> error("Cheater " ^^ showPlayer(p) ^^ " took " ^^ intToString(n) ^^ " sticks!")
  case Return(x)   -> x
}

# Alternatively, upon cheating the opponent is given the victory
sig cheatLose : (Comp({Cheat:(Player,Int) {}-> Zero|e}, Player)) ->
                 Comp({Cheat{_}|e}, Player)
open handler cheatLose(m) {
  case Cheat(Alice,_,_) -> Bob
  case Cheat(Bob,_,_)   -> Alice
  case Return(x)        -> x
}

# Alice cheats against Bob's perfect strategy
#
# (If n < 4 then Alice wins, otherwise the game is abandoned because
# Alices cheats.)
sig cpReport : (Int) {Move{_}}~> Player
fun cpReport(n) {
    perfect(cheatReport(aliceCheats(checkedGame(n))))
}

# Alice cheats against Bob's perfect strategy
#
# (If n < 4 then Alice wins, otherwise Bob wins because Alice
# cheats.)
sig cpLose : (Int) {Move{_}}~> Player
fun cpLose(n) {
  perfect(cheatLose(aliceCheats(checkedGame(n))))
}

#
# Returning to strategies
#

# Using open handlers we can give an interpretation of randomness
# thus we can encode mixed strategies.

sig rand : () {Rand:a|_}~> a
fun rand() {do Rand}

sig ms : Strategy
fun ms(n,k) {
  var r = floatToInt(rand() *. 1000.0);
  var take = (r `mod` 3) + 1; # Make sure take is in {1,2,3}
  if (take <= n) {k(take)}    # Make sure it is a legal move...
  else {k(1)}                 # ... otherwise just pick one (might be suboptimal)
}

# mixed strategy handler assigns a random strategy to both players
sig mixed : (Comp({Move:(Player,Int) {}-> Int,Rand:Float|e}, a)) ->
             Comp({Move{_},Rand:Float|e}, a)
open handler mixed(m) {
  case Move(p,n,k) -> ms(n,k)
  case Return(x)   -> x
}

# randomFloat handler uses Links' builtin random number generator
sig randomFloat : (Comp({Rand:Float|e}, a)) ->
                   Comp({Rand{_}|e}, a)
open handler randomFloat(m) {
  case Return(x) -> x
  case Rand(k)   -> k(random())
}

# notReallyRandom is entirely deterministic; it always returns 3.0
sig notReallyRandom : (Comp({Rand:Float|e}, a)) ->
                       Comp({Rand{_}|e}, a)
open handler notReallyRandom(m) {
  case Return(x) -> x
  case Rand(k)   -> k(3.0)
}


# Strategy handler factory
sig strategy : (Strategy, Strategy) ->
               (Comp({Move:(Player,Int) {}-> Int |e}, a)) ->
            Comp({Move{_}                    |e}, a)
fun strategy(s1, s2) {
    open handler(m) {
         case Move(Alice,n,k) -> s1(n,k)
     case Move(Bob,n,k)   -> s2(n,k)
     case Return(x)       -> x
    }
}


#
# A stateful game
#
# We are going to create a highscore board for Nim.
# In order to achieve this we need to introduce some notion of state.

# The game state is an association list
# where a player is associated with its number of wins
typename GameState = [(Player,Int)];

# Initially both players have zero victories
var initialState = [(Alice,0),(Bob,0)] : GameState;


# We need two state operations:
#  1) Retrieval of state (get)
#  2) Modification of state (put)
sig get : (Comp({Get:s|_}, s))
fun get() {do Get}

sig put : (s) {Put:(s) {}-> ()|_}~> ()
fun put(s) {do Put(s)}

# The state handler is parameterised by a state s
# which is threaded through the handler during evaluation
sig state : (Comp({Get:s,Put:(s) {}-> ()|e}, a)) ->
            (s) ->                                  # Initial state
        Comp({Get{_},Put{_}|e}, a)
open handler state(m)(s) {
     case Get(k)    -> k(s)(s)
     case Put(p,k)  -> k(())(p)
     case Return(x) -> x
}

# Next, we define a simple handler which records
# the winner of a single game
sig scorerecorder : (Comp({Get:GameState,Put:(GameState) {}-> ()|e}, Player)) ->
                     Comp({Get:GameState,Put:(GameState) {}-> ()|e}, ())
open handler scorerecorder(m) {
  case Return(x) -> {
    var s = updateScore(x, get()); # Update the game state
    put(s);                        # Commit the change
  }
}


# The board printer handler prints the scoreboard
sig boardPrinter : (Comp({Get:GameState|e}, a)) ->
                    Comp({Get:GameState|e}, ())
open handler boardPrinter(m) {
     case Return(x) -> printBoard(get())
}

# Finally, we define repeatGame which repeats
# a given game r times
sig repeatGame : (Int, Comp({Move:(Player,Int) {}-> Int|e},  a)) ->
                       Comp({Move:(Player,Int) {}-> Int|e}, [a])
fun repeatGame(r, m)() {
    for (_ <- [1..r]) {
        [m()]
    }
}

sig repeatGame2 : (Int, Comp({ |e},  a)) ->
                        Comp({ |e},  ())
fun repeatGame2(r, m)() {
    fold_left(fun(_,_) {
      var _ = m(); ()
    }, (), [1..r])
}

sig repeatGame3 : (Int) -> (Comp({ |e}, a)) ->
                            Comp({ |e}, ())
fun repeatGame3(r)(m)() {
    fold_left(fun(_,_) {
      var _ = m(); ()
    }, (), [1..r])
}


# (state -<- boardPrinter -<- randomFloat -< strategy(ms,ms)(repeatGame(10, scorerecorder -< game(33))))(initialState)();

#
# Auxiliary functions
#

# Auxiliary function
# Increment the given player's number of wins by one
sig updateScore : (Player, GameState) ~> GameState
fun updateScore(p,s) {
  map(fun(e) {
    if (p == first(e)) {
       (p, second(e)+1)
    } else { e }
  }, s)
}

# Auxiliary function
# Pretty prints the scoreboard.
sig printBoard : (GameState) ~> ()
fun printBoard(s) {
    var xs = map(fun(p) {
        var player = showPlayer(first(p));
    var wins   = intToString(second(p));
    var ws_c1 = 12 - strlen(player);
    var ws_c2 = 10 - strlen(wins);
    "| " ^^ player ^^ makeWhitespace(11 - strlen(player)) ^^ "|" ^^ makeWhitespace(8 - strlen(wins)) ^^ wins ^^ " |"
    }, sort(s));

    println("/======================\\");
    println("|     NIM HIGHSCORE    |");
    println("|======================|");
    println("|   Player   |  #Wins  |");
    println("|============|=========|");
    println(xs !! 0);
    println("|============|=========|");
    println(xs !! 1);
    println("\\======================/");
}

# Auxiliary function
# Ranks Alice and Bob
sig sort : ([(2:a|p)]) ~> [(2:a|p)]
fun sort(s) {
  if (second(s !! 1) > second(s !! 0)) {
     (s !! 1) :: (s !! 0) :: []
  } else {s}
}

# Auxiliary function
# Creates whitespace
sig makeWhitespace : (Int) ~> String
fun makeWhitespace(n) {
    implode(replicate(n, ' '))
}

# Handler composition operator
# Data flows from right to left (or inside-out)
sig -<- : ((a) -e-> b, (c) -e-> a) -> (c) -e-> b
op g -<- f {fun (x) {g(f(x))}}

# Combine a sequence of handlers with a computation m
sig -< : ((a) -e-> b, a) -e-> b
op f -< m  {f(m)}

# Alternative pipeline operator; data flows from left-to-right
# Maybe more natural?
op m >> f {f(m)}
