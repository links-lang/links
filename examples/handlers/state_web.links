# Conversion functions
fun boolToString(b) {
  switch (b) {
    case true -> "true"
    case false -> "false"
  }
}

# Toggle on/off

# State operations
sig get : () {Get:s |_}-> s
fun get() {do Get}

sig put : (s) {Put:(s) {}-> () |_}-> ()
fun put(st) { do Put(st) }

# Stateful computation
sig toggle : Comp({Get:Bool,Put:(Bool) {}-> () |_}, ())
fun toggle() client {
  var bit = do Get;
  print(boolToString(bit));
  do Put(not(bit));
  var sbit = do Get;
  print(boolToString(sbit))
}

# State handler
sig runState : (Comp({Get:s,Put:(s) {}-> ()  |e},  a  )) -> # Stateful computation
               (s)                                       -> # Initial state
                Comp({Get{_},Put{_} |e},  a)    # Stateless computation
fun runState(m)(st)() client {
  var run = handle(m()) {
    case Return(x)      -> fun(ret_st) { x }
    case Get(resume)    -> fun(get_st) { resume(get_st)(get_st) }
    case Put(p,resume)  -> fun(put_st) { resume(())(p) }
  };
  run(st)
}

sig evalState : (Comp({Get:s,Put:(s) {}-> ()  |e},  a  )) ->
                (s)                                       ->
                 Comp({Get{_},Put{_} |e},  a)
fun evalState(m)(st)() client {
  handle(m())(st -> st) {
    case Return(x)      -> x
    case Get(resume)    -> resume(st, st)
    case Put(p,resume)  -> resume((), p)
  }
}

# sig shallowState : (Comp({Get:s ,Put:(s) {}-> ()  |e},  a  )) ->
#                    (s)   {Get{_},Put{_}           |e}         ~> a
# fun shallowState(m)(st) {
#   shallowhandle(m()) {
#     case Return(x) -> x
#     case Get(resume) -> shallowState(fun() { resume(st) })(st)
#     case Put(p,resume) -> shallowState(fun() { resume(()) })(p)
#   }
# }

fun toggleButton() client {
  var s0 = false;
  var x = evalState(toggle)(s0)();
  ()
}

# Page
fun mainPage(_) {
  page
    <html>
      <body>
        <form l:onsubmit="{toggleButton()}">
          <input type="submit" id="on" value="Click me!" />
        </form>
      </body>
    </html>
}


fun main() {
  addRoute("/", mainPage);
  servePages()
}

main()
