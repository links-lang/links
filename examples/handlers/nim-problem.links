# Nim game (https://en.wikipedia.org/wiki/Nim)
# This example is adapted from Kammar et al. (2013) (https://github.com/slindley/effect-handlers)

# Auxiliary functions
sig maximum : (a,a) -> a
fun maximum(a,b) {
    if (a > b) {a}
    else {b}
}

# Returns Just the index of x in xs if x is an element in xs, otherwise Nothing.
fun elemIndex(x, xs) {
    var n = fold_left(fun(acc, y) {
      switch (acc) {
      	     case (n,Just(i)) -> (n,Just(i))
	     case (n,Nothing) -> if (x == y) { (n, Just(n)) } else { (n+1,Nothing) }
      }
    }, (0,Nothing), xs);

    second(n)
}

# A game begins with n sticks on the table. The game has two players: Alice and Bob.
# Alice goes first. Alice takes between one and three sticks, then it is Bob's turn
# and similary Bob takes between one and three sticks. They alternate turns until
# there are no more sticks left. The player, who takes the last stick, wins.


#
# The game
#

typename Player = [|Alice|Bob|];
typename Comp(e::Row, a) = () ~e~> a;
typename Zero = [||];

# The 'Move' operation represents a move by a player in the game. The
# parameter is a pair of the player and the number of sticks
# remaining. The return value is the number of sticks the player
# chooses to take.
sig move : (Player, Int) {Move : (Player, Int) {}-> Int|_}~> Int
fun move(player, sticks) {do Move(player, sticks)}

# We model the rules of the game as an abstract computation over the
# Move operation that returns the winner.

# a game is parameterised by the number of starting sticks
sig game : (Int) -> Comp ({Move: (Player, Int) {}-> Int|_}, Player)
fun game(n)() {aliceTurn(n)}

sig aliceTurn : (Int) {Move:(Player,Int) {}->Int|_}~> Player
fun aliceTurn(n) {
  if (n == 0) {
    Bob    # Bob wins
  } else { 
    bobTurn(n - move(Alice, n))
  }
}

sig bobTurn : (Int) {Move:(Player,Int) {}->Int|_}~> Player
fun bobTurn(n) {
  if (n == 0) {
    Alice    # Alice wins 
  } else {
    aliceTurn(n - move(Bob, n))
  }
}

# Note that this implementation does not check that each player takes
# between one and three sticks on each turn. We will add such a check
# later.

#
# Strategies
#

sig showPlayer : (Player) -> String
fun showPlayer(p) {
  switch (p) {
    case Alice -> "Alice"
    case Bob   -> "Bob"
  }
}

# construct an open handler that assigns strategy s to player
# forwarding the moves of the other player to be handled later
fun strategy(player, s)(m)() {
  open handle(m) {
    case Return(x)     -> x
    case Move(p, n, k) ->
      println("player: " ^^ showPlayer(player));
      println("p: " ^^ showPlayer(p));
      if(p == player) {s(n, k)}
      else {
        var m = move(p, n);
	k(m)
      }
  }
}

# naive strategy: always pick one stick
fun ns(n, k) {k(1)}

# perfect strategy
fun ps(n, k) {k(maximum(mod(n, 4), 1))}

# both players adopt a naive strategy: always pick one stick
fun nn(n) {
  strategy(Bob, ns)(strategy(Alice, ns)(game(n)))()
}


# play perfect vs perfect
fun pp(n) {
  strategy(Bob, ps)(strategy(Alice, ps)(game(n)))()
}

# list of valid moves given n sticks remaining
fun validMoves(n) {
  filter(fun(m) { m <= n }, [1,2,3])
}

# brute force strategy: enumerate all possible moves
fun bfs(player)(n, k) {
  var winners = map(k, validMoves(n));
  var hasPlayerWon = elemIndex(player, winners);
  switch (hasPlayerWon) {
    case Nothing -> k(1)
    case Just(i) -> k(i+1)
  }
}

fun bp(n) {
  strategy(Bob, bfs(Bob))(strategy(Alice, ps)(game(n)))()
}

# Instead of simply evaluating the winner according to some strategy,
# we can also compute other data. For instance, we can compute a tree
# representing the possible moves of each player.


#
# Move tree
#
typename MoveTree =
  [| Take : (Player, [(Int, MoveTree)])
   | Winner : Player
   |];

# reify a move as part of the move tree
#sig reifyMove : (Player, Int, (Int) ~e~> MoveTree) ~e~> MoveTree
fun reifyMove(player, n, k) {
  var moves = map(k, validMoves(n));
  var subgames = zip([1..length(moves)], moves);
  Take(player, subgames)
}

# Complete move tree generator
sig mtGen : (Comp({Move:(Player, Int) {}-> Int}, Player)) {Move{_}}~> MoveTree
handler mtGen(m) {
  case Return(x)          -> Winner(x)
  case Move(player, n, k) -> reifyMove(player, n, k)
}

sig mt : (Int) {Move{_}}~> MoveTree
fun mt(n) {
  mtGen(game(n))
}

# links> mt(3)
#  Take((Alice(), [(1, Take((Bob(), [(1, Take((Alice(), [(1, Winner(Alice()))]))),
#                                    (2, Winner(Bob()))]))),
#                  (2, Take((Bob(), [(1, Winner(Bob()))]))),
#                  (3, Winner(Alice()))]))

# generate the move tree for a game in which Bob plays a perfect
# strategy

open handler forwardBob(m) {
  case Return(x)         -> Winner(x)
  case Move(Alice, n, k) -> reifyMove(Alice, n, k)
  case Move(Bob,   n, k) ->
    var take = move(Bob, n);
    Take(Bob, [(take, k(take))])
}

# Note: we reuse Perfect vs Perfect-handler. It only ever gets to handle Move(Bob,n)
# even though it is defined for Move(Alice, n) as well.
fun mp(n) {
  strategy(Bob, ps)(forwardBob(game(n)))
}

# links> mp(3);
#    Take((Alice(), [(1, Take((Bob(), [(2, Winner(Bob()))]))),
#                    (2, Take((Bob(), [(1, Winner(Bob()))]))),
#                    (3, Winner(Alice()))]))

#
# Cheating
# 

# Cheat (p, m) is invoked when player p cheats by attempting to take
# m sticks (for m < 1 or 3 < m)
sig cheat : (Player, Int) {Cheat : (Player, Int) {}-> Zero|_}~> a
fun cheat(p, m) {switch (do Cheat(p, m)) { }}

# Check whether a given player cheated
fun checkMove(player, n, k) {
  var take = move(player, n);
  if (take < 1 || 3 < take) { # Cheater detected!
    cheat(player, take)
  } else {                    # Otherwise OK
    k(take)
  }
}

open handler check(m) {
  case Move(player, n, k) -> checkMove(player, n, k)
  case Return(x)          -> x
}

fun checkedGame(n) {check(game(n))}

# a cheating strategy: take all of the sticks, no matter how many
# remain
fun cheater(n, k) {
  k(n)
}

# Alice cheats against Bob's perfect strategy
fun aliceCheats(m) {
  strategy(Bob, ps)(strategy(Alice, cheater)(m))
}


# in an unchecked game Alice always wins
fun cpUnchecked(n) {
  aliceCheats(game(n))
}

# if a player cheats then halt the game and report the cheater
sig cheatReport : (Comp ({Cheat:(Player, Int) {}-> Zero|e}, a)) ->
                   Comp ({Cheat-                       |e}, a)
open handler cheatReport(m) {
  case Cheat(Alice, n, k) -> error("Cheater Alice took " ^^ intToString(n) ^^ " sticks")
  case Cheat(Bob,   n, k) -> error("Cheater Bob took " ^^ intToString(n) ^^ " sticks")
  case Return(x)          -> x
}

# if a player cheats then the opponent wins immediately
open handler cheatLose(m) {
  case Cheat(player, n, k) -> player
  case Return(x)           -> x
}

# Alice cheats against Bob's perfect strategy
#
# (If n < 4 then Alice wins, otherwise the game is abandoned because
# Alices cheats.)
fun cpReport(n) {
  aliceCheats(cheatReport(checkedGame(n))) 
}

# Alice cheats against Bob's perfect strategy
# 
# (If n < 4 then Alice wins, otherwise Bob wins because Alice
# cheats.)
fun cpLose(n) {
  aliceCheats(cheatLose(checkedGame(n)))
}
