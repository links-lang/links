# Pi estimation

# Operations
sig yield : (a) {Yield: (a) => () |_}-> ()
fun yield(x) { do Yield(x) }

sig await : () {Await:a |_}-> a
fun await() { do Await }

sig abort : () {Abort:Zero |e}-> a
fun abort() {
  switch (do Abort) { }
}


# Point type
typename Point = (x:Float, y:Float);

sig makePoint : (Float, Float) -> Point
fun makePoint(x, y) { (x=x, y=y) }

sig insideUnitCircle : (Point) -> Bool
fun insideUnitCircle(p) {
  (p.x *. p.x +. p.y *. p.y) <= 1.0
}

# Streams of random points
sig randomPoints : () {Yield: (Point) => () |_}~> a
fun randomPoints() {
  var p = makePoint(random(), random());
  yield(p);
  randomPoints()
}

# Synchronous take operation
sig take : (Int, Comp(b, {Yield: (a) => () |e})) {Yield{_} |e}~> [a]
fun take(n, m) {
  handle(m())(n <- n, st <- []) {
    case _ -> st
    case <Yield(x) => resume> ->
       if (n <= 0) st
       else resume((), n-1, x :: st)
  }
}

# Compute pi

sig computePi : (Int) -> Comp(a, {Yield: (Float) => () |_})
fun computePi(n)() {
  fun loop(total, count) {
     # Synchronously take `n' random points
     var points = take(n, randomPoints);
     # Sanitise the points
     var inside = filter(insideUnitCircle, points);

     var total = total + n;
     var count = count + length(inside);
     var ratio = intToFloat(count) /. intToFloat(total);
     # The area A of a circle is given by the following formula
     #       A = π * r²,
     # hence π = A/r². So, given random points with
     #       x in (0,1), y in (0,1),
     # the ratio of those inside a unit circle should approach π / 4.
     # Therefore, the value of π should be:
     yield(ratio *. 4.0);

     loop(total, count)
  }
  loop(0, 0)
}

# Display pi estimation
fun renderEstimations(n)() {
  fun eraser(n)() {
    fun loop(n) {
      if (n <= 0) ()
      else { print("\b"); loop(n-1) }
    }
    loop(n)
  }

  fun display(pi, i, n) {
    var s = "Pi estimation (" ^^ intToString(i) ^^ "/" ^^ intToString(n) ^^ "): " ^^ pi;
    print(s);
    strlen(s)
  }

  fun loop(i, n, erase) {
    if (i >= n) { print("\n") }
    else {
      var pi = await();
      erase();
      var len = display(floatToString(pi), i+1, n);
      loop(i+1, n, eraser(len))
    }
  }
  var len = display("0.0", 0, n);
  loop(0, n, eraser(len))
}

fun collectEstimations(n)() {
  fun loop(n, acc) {
    if (n <= 0) acc
    else loop(n-1, await() :: acc)
  }
  loop(n, [])
}

# Multi-handler
typename Resumption(a, e::Eff, r) = (a) ~e~> r;
typename Step(a, e::Eff, r) =
                (mu b . [|Done:r
                         |Yielded:(a, Resumption((), { |e}, b))
                         |Awaits:Resumption(a, { |e}, b)
                         |]);

sig step : (Comp(b, {Await:a, Yield: (a) => () |e})) {Await{q}, Yield{p} |e}~> Step(a, { Await{q}, Yield{p} |e}, b)
fun step(f) {
  handle(f()) {
    case x        -> Done(x)
    case <Yield(x) => resume> -> Yielded(x, resume)
    case <Await => resume>    -> Awaits(resume)
  }
}

sig exchange : (Comp(b, {Await:a, Yield: (a) => () |e}), Comp(b, {Await:a, Yield: (a) => () |e})) { Await{_}, Yield{_} |e}~> b
fun exchange(f, g) {
  fun exchange_aux(f, g) {
    switch( (f, g) ) {
      case (Awaits(resume0), Yielded(x, resume1)) ->
        exchange_aux(resume0(x), resume1(()))
      case (Done(x), _) -> x
      case _ -> error("Improper synchronisation")
    }
  }
  exchange_aux(step(f), step(g))
}

# Shallow handler
typename Consumer(a, e::Eff, b) = (a) {Abort:Zero, Await:a |e}~> b;
typename Producer(a, e::Eff, b) = () {Abort:Zero, Yield:(a) => () |e}~> b;

mutual {
  sig copipe : (Consumer(a, { Yield{q} |e}, b), Producer(a, { Await{p} |e}, _)) {Abort:Zero, Await{p}, Yield{q} |e}~> b
  fun copipe(receiver, sender) {
    shallowhandle(sender()) {
      case _ -> abort()
      case <Yield(x) -> resume> -> pipe(fun() { resume(()) }, fun() { receiver(x) })
    }
  }

  sig pipe : (Producer(a, { Await{p} |e}, _), Comp(b, {Abort:Zero, Await:a, Yield{q} |e})) {Abort:Zero, Await{p}, Yield{q} |e}~> b
  fun pipe(sender, receiver) {
    shallowhandle(receiver()) {
      case x -> x
      case <Await -> resume> -> copipe(resume, sender)
    }
  }
}

fun catch(m) {
  handle(m()) {
    case x -> x
    case <Abort> -> error("Caught abort")
  }
}


fun example(n) {
  catch(fun() {
    pipe(computePi(30000), renderEstimations(n))
  })
}

fun unitTest() {
  catch(fun() {
    pipe(computePi(30000), collectEstimations(5))
  })
}
