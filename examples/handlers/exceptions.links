# Resumable exceptions
#
#   Program idea: Small calculator program which sums user supplied
#                 integers. (Links supports only user input via web
#                 forms, so we simulate inputs in this example)
#

# Standard types
typename Comp(e::Row, a) = () { |e}~> a;

# Simulation of input via prompt
sig input : (String) {Input:(String) {}-> a |_}~> a
fun input(s) {print(s); do Input(s)}

# Computation summing (simulated) user supplied integers
sig sumUp : Comp({Input:(String) {}-> Int |_}, Int)
fun sumUp() {
  sum([input("10"), input("20"), input("MMXVII"), input("30")])
}

# Fail operation to signal conversion failure
sig fail : (exn) {Fail:(exn) {}-> b |_}-> b
fun fail(e) {do Fail(e)}

# String to integer conversion
sig parseInt : (String) {Fail:(String) {}-> Int|_}-> Int
fun parseInt(s) {
  if (isInt(s)) stringToInt(s)
  else fail(s)
}

# Input handling
sig prompt : (Comp({Fail:(String) {}-> Int,Input:(String) {}-> Int |e}, a)) ->
              Comp({Fail:(String) {}-> Int,Input{_}                |e}, a)
fun prompt(m)() {
  handle(m()) {
    case Return(x)   -> x
    case Input(n,k)  -> k(parseInt(n))
  }
}

# Standard exception handling
sig catchFail : (Comp({Fail:(String) {}-> a |e}, a)) -> Comp({Fail{_} |e}, a)
fun catchFail(m)() {
  handle(m()) {
    case Return(x) -> x
    case Fail(s,_) -> error("Conversion failure: " ^^ s)
  }
}

sig printResult : (Comp({ |e}, Int)) ~e~> ()
fun printResult(m) {
  handle(m()) {
    case Return(x) -> print("Sum is " ^^ intToString(x))
  }
}

# Example 1
fun example1() {
  printResult -<- catchFail -<- prompt @ sumUp
}

# Resumable exceptions
sig catchResume : (Comp({Fail:(String) {}-> Int |e}, a)) -> Comp({Fail{_} |e}, a)
fun catchResume(m)() {
  handle(m()) {
    case Return(x) -> x
    case Fail(s,k) -> print("Conversion failure: " ^^ s); k(0)
  }
}

# Example 2
fun example2() {
  printResult -<- catchResume -<- prompt @ sumUp
}

# Unit test
sig sumUpSilently : Comp({Input:(String) {}-> Int |_}, Int)
fun sumUpSilently() {
  fun input(s) {do Input(s)}
  sum([input("10"), input("20"), input("MMXVII"), input("30")])
}

fun unitTest() {
  handle(prompt(sumUpSilently)()) {
    case Fail(_,k) -> k(0)
    case Return(x : Int) -> x
  }
}
