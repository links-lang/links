typename Task         = String;
typename Employee     = (name:String, tasks:[Task], salary:Int);
typename Contact      = (name:String, "client":Bool);
typename Department   = (name:String, employees:[Employee], contacts:[Contact]);
typename Organisation = [Department];

var db = database "organisation";

var keytasks    = table "keytasks"    with (dept : String)                from db;
var tasks       = table "tasks"       with (employee : String, task : String)  from db;
var employees   = table "employees"
                  with (dept : String, employee : String, salary : Int)        from db;
var contacts    = table "contacts"
                  with (dept : String, contact : String, "client" : Bool) from db;
var departments = table "departments" with (dept : String)                from db;

fun isPoor(x) {x.salary < 1000}
fun isRich(x) {x.salary > 1000000}
fun outliers(xs) {filter (fun (x) {isRich(x) || isPoor(x)}, xs)}
fun clients(xs) {filter (fun (x) {x."client"}, xs)}
fun get(xs, f) {for (x <- xs) [(name=x.name, tasks = f(x))]}

# construct a nested representation of the organisation
sig organisation : () -> Organisation
fun organisation() {
  for (x <-- departments)
    [(name=x.dept,
      employees=
        for (y <-- employees) where (x.dept == y.dept)
          [(name=y.employee,
            tasks=
              for (z <-- tasks)
              where (y.employee == z.employee)
                [z.task],
            salary=y.salary)],
      contacts=
       for (y <-- contacts) where (x.dept == y.dept)
         [(name=y.contact, "client"=y."client")])]
}

sig interesting : (() {}-> (Organisation)) -> [(department:String, people:[(name:String, tasks:[String])])]
fun interesting(org) {
  query {
    for (x <- org())
      [(department=x.name,
        people=get(outliers(x.employees), fun (y) {y.tasks})
            ++ get(clients(x.contacts), fun (_) {["buy"]}))]
  }
}

fun normalised() {
  query {
    for (x <-- departments)
      [(department=x.dept,
        people=
          (for (y <-- employees)
           where ((x.dept == y.dept)  && ((y.salary < 1000) || (y.salary > 1000000)))
             [(name=y.employee,
               tasks=for (z <-- tasks) where (z.employee == y.employee)
                       [z.task])])
           ++
           (for (y <-- contacts) where ((x.dept == y.dept) && y."client")
              [(name=y.contact,
                tasks=["buy"])]))]
  }
}

normalised()
#interesting(organisation)
