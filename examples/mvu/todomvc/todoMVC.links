open import Mvu;
open import MvuHTML;
open import MvuAttrs;
open import MvuEvents;

typename Entry = (description : String, completed : Bool, editing : Bool, id : Int);
typename Model = (entries : [Entry], field : String, uid : Int, visibility : String);
typename Msg =
  [| NoOp
   | UpdateField : String
   | EditingEntry : (Int,Bool)
   | UpdateEntry : (Int,String)
   | Add
   | Delete : Int
   | DeleteComplete
   | Check : (Int,Bool)
   | CheckAll : Bool
   | ChangeVisibility : String |];

fun updateFieldHandler() {
  onInput(fun (str) { UpdateField(str) })
}

fun enterHandler() {
  onEnter(fun() { Add })
}

fun updateEntryHandler(id) {
  onInput(fun(str) { UpdateEntry(id, str) })
}

fun blurHandler(id, tf) {
  onBlur(fun() { EditingEntry(id, tf) })
}

fun editingEnterHandler(id, tf) {
  onEnter(fun() { EditingEntry(id, tf) })
}

fun checkEntryHandler(id, notCompleted) {
  onClick(fun() { Check(id, notCompleted) })
}

fun checkAllHandler(notCompleted) {
  onClick(fun() { CheckAll(notCompleted) })
}

fun deleteHandler(id) {
  onClick(fun() { Delete(id) })
}

fun changeVisibilityHandler(vis) {
  onClick(fun() { ChangeVisibility(vis) })
}

fun editingHandler(id, tf) {
  onDoubleClick(fun () { EditingEntry(id, tf) })
}

sig newEntry : (String,Int) ~> Entry
fun newEntry(desc, idToSet) {
  (description = desc, completed = false, editing = false, id = idToSet)
}

fun getUpdatedEntries(model) {
  if (model.field == "") {
    model.entries
  } else {
    model.entries ++ [newEntry(model.field, model.uid)]
  }
}

sig updt : (Msg, Model) ~> Model
fun updt(msg, model) {
  switch (msg) {
    case NoOp ->
      model

    case Add ->
      (model with uid = model.uid + 1, field = "", entries = getUpdatedEntries(model))

    case UpdateField(str) ->
      (model with field = str)

    case UpdateEntry(id,task) ->
      var updateEntry = fun(currentEntry) {
        if (currentEntry.id == id) {
          (currentEntry with description = task)
        } else {
          currentEntry
        }
      };
      (model with entries = map(updateEntry, model.entries))

    case Delete(id) ->
      (model with entries = filter(fun(t) { t.id <> id }, model.entries))

    case Check(id, isCompleted) ->
      var updateEntry = fun(currentEntry) {
        if (currentEntry.id == id) {
          (currentEntry with completed = isCompleted)
        } else {
          currentEntry
        }
      };
      (model with entries = map(updateEntry, model.entries))

    case CheckAll(isCompleted) ->
      var updateEntry = fun(currentEntry) {
        (currentEntry with completed = isCompleted)
      };
      (model with entries = map(updateEntry, model.entries))

    case ChangeVisibility(vis) ->
      (model with visibility = vis)

    case EditingEntry(id, isEditing) ->
      var updateEntry = fun(currentEntry) {
        if (currentEntry.id == id) {
          (currentEntry with editing = isEditing)
        } else {
          currentEntry
        }
      };
      (model with entries = map(updateEntry, model.entries))

    case other ->
      model
  }
}


### Rendering

# Helper functions
fun ca(xs) { MvuAttrs.concat(xs) }
fun ch(xs) { MvuHTML.concat(xs) }
var noAttrs = MvuAttrs.empty;
var noChildren = MvuHTML.empty;


sig viewInput : (String) ~> HTML(Msg)
fun viewInput(task) {
  header (class("header"),
    ch([
      h1 (noAttrs, textNode("todos")),
      input (
        ca([type ("text"),
            class ("new-todo"),
            placeholder ("What needs to be done?"),
            name ("newTodo"),
            id("newTodo"),
            value(task),
            updateFieldHandler(),
            enterHandler()]),
        noChildren)
    ]))
}

sig viewEntry : (Entry) ~> HTML(Msg)
fun viewEntry(todo) {
  var classes =
    classList([("completed", todo.completed), ("editing",todo.editing)]);

  li (class(classes),
    ch([
      div (class ("view"), ch([

        input(
          ca([
            type ("checkbox"),
            name ("toggle"),
            class ("toggle"),
            checked (todo.completed),
            checkEntryHandler(todo.id, not(todo.completed))
          ]), noChildren),

        MvuHTML.label(editingHandler(todo.id, true), textNode(todo.description)),

        span (ca([class ("destroy"), deleteHandler(todo.id)]), noChildren)
      ])),

      input(
        ca([
          class("edit"),
          value(todo.description),
          name("title"),
          id("todo-" ^^ intToString(todo.id)),
          updateEntryHandler(todo.id),
          blurHandler(todo.id, false),
          editingEnterHandler(todo.id, false)]),
        noChildren)
    ]))
}

sig viewEntries : (String, [Entry]) ~> HTML(Msg)
fun viewEntries(visibility, entries) {
  var isVisible = fun (todo) {
    switch(visibility) {
      case("Completed") ->
        todo.completed
      case("Active") ->
        not(todo.completed)
      case other ->
        true
    }
  };
  var allCompleted = length(filter(fun(x) { not(x.completed) }, entries)) == 0;
  section(class ("main"),
    input(
      type ("checkbox") +@ id ("toggle-all") +@
      class ("toggle-all") +@ checkAllHandler(not(allCompleted)),
    noChildren) +*
    ul(class ("todo-list"), ch(map(viewEntry, filter(isVisible, entries))))
  )
}

sig viewControlsCount : (Int) ~> HTML(Msg)
fun viewControlsCount(entriesLeft) {
  var item_ = if (entriesLeft == 1) {
    " item"
  } else {
    " items"
  };
  span (class ("todo-count"), ch([
    strong (noAttrs, textNode(intToString(entriesLeft))),
    textNode(item_),
    textNode(" left")
  ]))
}

sig visibilitySwap : (String, String, String) ~> HTML(Msg)
fun visibilitySwap(uri, visibility, actualVisibility) {
  var classes = classList([("selected", visibility == actualVisibility)]);
  li (changeVisibilityHandler(visibility),
    a(ca([href (uri), class (classes)]), textNode(visibility)))
}

sig viewControlsFilters : (String) ~> HTML(Msg)
fun viewControlsFilters(visibility) {
 ul (class ("filters"), ch([
    visibilitySwap("#/", "All", visibility), textNode(" "),
    visibilitySwap("#/active", "Active", visibility), textNode(" "),
    visibilitySwap("#/completed", "Completed", visibility)
  ]))
}

sig viewControls : (String, [Entry]) ~> HTML(Msg)
fun viewControls(visibility, entries) {
  var entriesCompleted = length(filter(fun(x) { x.completed }, entries));
  var entriesLeft = length(entries) - entriesCompleted;
  var entriesEmpty = length(entries) == 0;
  footer (ca([class ("footer"), hidden(entriesEmpty)]), ch([
    viewControlsCount(entriesLeft),
    viewControlsFilters(visibility)
  ]))
}

sig view : (Model) ~> HTML(Msg)
fun view(model) {
  div (class ("todomvc-wrapper"),
    section (class ("todoapp"), ch([
      viewInput(model.field),
      viewEntries(model.visibility, model.entries),
      viewControls(model.visibility, model.entries)
    ]))
  )
}


fun mainPage(_) {
  var initialModel = (entries = [], field = "", uid = 0, visibility = "All");
  var evtHandler =
    runSimple("placeholder", initialModel, view, updt);
  page
  <html>
    <head>
      <title>Links - TodoMVC</title>
      <link rel="stylesheet" href="css/style.css" type="text/css" />
    </head>

    <body>
      <div id="placeholder"></div>
    </body>
  </html>
}

fun main() {
  addRoute("/", mainPage);
  addStaticRoute("/css", "css", [("css", "text/css")]);
  servePages()
}

main()
