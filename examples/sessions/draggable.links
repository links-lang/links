typename Wait = mu a.[&|MouseDown:?DomNode.mu b.[&|MouseOut:?DomNode.b, MouseUp:a|&]|&];
typename Drag = mu b.[&|MouseOut:?DomNode.b, MouseUp:Wait|&];

sig waiting : (String, Wait) ~> ()
fun waiting(id, s) client {
  offer (s) {
    case MouseDown(s) ->
      var (elem, s) = receive(s);
      dragging(id, elem, s)
  }
}

sig dragging : (String, DomNode, Drag) ~> ()
fun dragging(id, elem, s) {
  offer(s) {
    case MouseUp(s)   -> waiting(id, s)
    case MouseOut(s)  -> {
      var (toElem, s) = receive(s);
      swapNodes(elem, toElem);
      dragging(id, elem, s)
    }
  }
}

fun format(text) {
    <li style="color: #7E9E50; font: 20px Georgia; background-color: #ECF3E1; 
               border:1px solid #C5DEA1; cursor: move; margin: 0px;">
    {stringToXml(text)}</li>
}

sig draggableList : (String, [String]) ~> Xml
fun draggableList(id, items)
{
  var ap = new();

  var manager = spawn {
    fun wait(c) {
      var s = accept(ap); 
      <|offer s {
        case MouseUp -> {wait(c)}
        case MouseDown -> s(elem).{
          if (isElementNode(elem) && (parentNode(elem) == getNodeById(id))) {
            <|MouseDown c.c[elem].{drag(c)}|>
          } else {
            wait(c)
          }}
        case MouseOut -> s(elem).{wait(c)}
      }|>
    }

    fun drag(c) {
      offer(accept(ap)) {
        case MouseUp(s)   -> <|MouseUp c.{wait(c)}|>
        case MouseDown(s) -> <|s(elem).{drag(c)}|>
        case MouseOut(s)  -> <|s(toElem).{
          if (isElementNode(toElem) && (parentNode(toElem) == getNodeById(id))) {
            <| MouseOut c.c[toElem].{drag(c)} |>
          } else {
            drag(c)
          }}|>
      }
    }
    
    wait(linknife (linfun (s) {waiting(id, s)}));
  };

  fun mouseUp() {
    var c = request(ap);
    <|MouseUp c.{()}|>
  }

  fun mouseDown(elem) {
    var c = request(ap);
    <|MouseDown c.c[elem].{()}|>
  }

  fun mouseOut(toElem) {
    var c = request(ap);
    <|MouseOut c.c[toElem].{()}|>
  }

  <ul id="{id}"
      style="width: 200px;
             list-style-image: url(http://script.aculo.us/images/bullet.gif)"
      l:onmouseup     = "{mouseUp()}"
      l:onmouseuppage = "{mouseUp()}"
      l:onmousedown   = "{mouseDown(getTarget(event))}"
      l:onmouseout    = "{mouseOut(getToElement(event))}">{
   for (item <- items)
        format(item)
  }</ul>
}

page
 <html>
 <body>
 <h2 style="font: 42px/30px Georgia, serif; color: #7E9E50;">Great Bears</h2>
 {draggableList("bears",["Pooh", "Paddington", "Rupert", "Edward"])}
 <h2 style="font: 42px/30px Georgia, serif; color: #7E9E50;">Great Beers</h2>
 {draggableList("beers",["Budvar", "Delirium Tremens", "Deuchars"])}
 <h2 style="font: 42px/30px Georgia, serif; color: #7E9E50;">Great Boars</h2>
 {draggableList("boars",["Sus scrofa scrofa","Sus scrofa ussuricus",
                         "Sus scrofa cristatus","Sus scrofa taiwanus"])}
 </body>
 </html>
