# Version with son being able to choose a single book.

typename ShopOffer  = mu a.[&|Add:?String.a, Checkout:?Int.?String.End|&];
typename ShopSelect = mu a.[+|Add:!String.a, Checkout:!Int.!String.End|+];

typename SonSelect = [&|Choice:!String.End|&];
typename SonOffer  = [+|Choice:?String.End|+];


sig waitForClient : (ShopOffer) ~> ()
fun waitForClient(s) client
{
    offer(s) {
        case Add(s)      ->
            var (item, s) = receive(s);
            appendChildren(stringToXml("Book name received: " ^^ item ^^ ", "), getNodeById("items"));
            waitForClient(s)

        case Checkout(s) ->
            var (card, s)    = receive(s);
            appendChildren(stringToXml("card number received: " ^^ intToString(card)), getNodeById("items"));
            var (address, s) = receive(s);
            appendChildren(stringToXml(", address received: " ^^ address), getNodeById("items"));
            close(s)
    }
}

sig waitForSon : (SonSelect) ~> ()
fun waitForSon(c) client
{
    offer(c) {
        case Choice(c) -> close(send("Children's Book", c))
    }
}

sig getSonBook : (SonOffer) ~> (String)
fun getSonBook(s) client
{
    var (choice, s) = receive(select Choice s);
  close(s);
    choice
}

sig orderBooks : (ShopSelect) ~> ()
fun orderBooks(c) client
{
    # "Mom's choice".
    var c = send("Alice in Wonderland", select Add c);

    # "Son's choice".
    var choice = getSonBook(fork(waitForSon));

    # Add son's choice.
    var c = send(choice, select Add c);
    close(send("Summerhall Square", send(8753, select Checkout c)))
}

sig main : () ~> ()
fun main() client
{
    orderBooks(fork(waitForClient))
}

page
    <html>
    <head><title>From Academic Papers</title></head>
    <body>
    <form l:onsubmit="{main()}">
    <h3>Example 2 from "Linear type theory for asynchronous session types":</h3>
    <button type="submit">Start communication</button>
    </form>
    <p id="items"></p>
    </body>
    </html>
