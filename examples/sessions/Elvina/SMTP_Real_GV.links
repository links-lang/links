# Everything is valid, 2 recipients.

typename Address = String;
typename Accept = String;
typename Message = String;
typename Error = String;
typename Subject = String;
typename Domain = String;


typename SMTPServer =
  mu welcome.[&|HELO:?Domain.[+|REJECT:welcome, ACCEPT:
     mu outer.[&|MAIL:?Address.
                      [+|REJECT:outer,
                         ACCEPT:
                                mu rcptLoop.
                                  [&|RCPT:?Address.
                                          [+|REJECT:rcptLoop,
                                             ACCEPT:
                                                    mu inner.
                                                      [&|RCPT:?Address.
                                                              [+|REJECT:inner,
                                                                 ACCEPT:inner|+],
                                                         DATA:?Subject.?Message.outer|&] |+] |&] |+],
                 QUIT:EndBang |&] |+] |&];

mutual {
  sig mailServer : (SMTPServer) ~> EndBang
  fun mailServer(s) {
    var realServer = connectSocket("smtp.inf.ed.ac.uk", 25);
    var realServer = fromJust(realServer);
    #var welcomeMessage = readFromSocket(realServer);
    var welcomeMessage = readServer(realServer);
    print("S: " ^^ welcomeMessage);
    start(s, realServer)
  }

  fun start(s, realServer) {
  offer(s) {
    case HELO(s) ->
           var (domain, s) = receive(s);
           writeToSocket("HELO " ^^ domain ^^ "\n", realServer);
           #var smtpAnswer = readFromSocket(realServer);
           var smtpAnswer = readServer(realServer);
           print("S: " ^^ smtpAnswer);
           var status = parseServerAnswer(smtpAnswer);
             if (status <> 250)
                { var s = select REJECT s;
                  print("S: " ^^ smtpAnswer);
                  mailServer(s)
                }
             else {
                  var s = select ACCEPT s;
                  outer(s, realServer)
              }
          }
  }

  fun outer(s, realServer) {
  offer(s) {
    case MAIL(s) ->
      var (address, s) = receive(s);
      writeToSocket("MAIL FROM:<" ^^ address ^^ ">\n", realServer);
      #var smtpAnswer = readFromSocket(realServer);
      var smtpAnswer = readServer(realServer);
      print("S: " ^^ smtpAnswer);
      var status = parseServerAnswer(smtpAnswer);
      if (status <> 250)
         { var s = select REJECT s;
         print("S: " ^^ smtpAnswer);
         outer(s, realServer)
         }
      else {
        var s = select ACCEPT s;
          rcptLoop(s, realServer)
       }

    case QUIT(s) ->
         print("C: QUIT");
         writeToSocket("QUIT\n", realServer);
         var smtpAnswer = readServer(realServer);
         print("S: " ^^ smtpAnswer);
         closeSocket(realServer);
         s
    }
  }

  fun rcptLoop(s, realServer) {
    offer(s) {
      case RCPT(s) ->
          var (rcpt, s) = receive(s);
          writeToSocket("RCPT TO:<" ^^ rcpt ^^ ">\n", realServer);
          #var smtpAnswer = readFromSocket(realServer); Older version.
          var smtpAnswer = readServer(realServer);
          print("S: " ^^ smtpAnswer);
          var status = parseServerAnswer(smtpAnswer);
          if (status <> 250)
             { var s = select REJECT s;
             print("S: " ^^ smtpAnswer);
             rcptLoop(s, realServer)
             }
          else {
             var s = select ACCEPT s;
             inner(s, realServer)
      }
    }
  }

  fun inner(s, realServer) {
    offer(s) {
      case RCPT(s) ->
          var (rcpt, s) = receive(s);
          writeToSocket("RCPT TO:<" ^^ rcpt ^^ ">\n", realServer);
          #var smtpAnswer = readFromSocket(realServer);
          var smtpAnswer = readServer(realServer);
          print("S: " ^^ smtpAnswer);
          var status = parseServerAnswer(smtpAnswer);
          if (status <> 250)
             { var s = select REJECT s;
             print("S: " ^^ smtpAnswer);
             inner(s, realServer)
              }
          else {
             var s = select ACCEPT s;
            inner(s, realServer)
    }

      case DATA(s) ->
        var (subject, s) = receive(s);
        var (message, s) = receive(s);
        writeToSocket("DATA\n", realServer);
        #var smtpAnswer = readFromSocket(realServer);
        var smtpAnswer = readServer(realServer);
        print("S: " ^^ smtpAnswer);
        writeToSocket("SUBJECT: " ^^ subject ^^ "\n", realServer);
        print("C: SUBJECT: " ^^ subject);
        writeToSocket(message ^^ "\n", realServer);
        print("C: " ^^ message);
        writeToSocket("\n.\n", realServer);
        print("C: .");
        #var smtpAnswer = readFromSocket(realServer);
        var smtpAnswer = readServer(realServer);
        print("S: " ^^ smtpAnswer);
        outer(s, realServer)
     }
  }

  fun readServer(realServer) {
    #var smtpAnswer = readFromSocket(realServer);
    switch(readFromSocket(realServer)) {
      case Just(s) -> s
      case Nothing -> readServer(realServer)
    }
  }

  sig parseServerAnswer : (String) ~> Int
  fun parseServerAnswer(packet) {
      var charred = explode(packet);
      var charredStatus = [selectElem(charred, 0), selectElem(charred, 1), selectElem(charred, 2)];
      var intStatus = stringToInt(implode(charredStatus));
      intStatus
  }

  sig extractDomain : (String) ~> String
  fun extractDomain(address) {
      var domain = extractDomain0(explode(address));
      implode(domain)
  }

  sig extractDomain0 : ([Char]) ~> [Char]
  fun extractDomain0(address) {
      switch(address) {
        case [] -> address
        case x::xs -> if (x == '@') xs
               else extractDomain0(xs)
      }
  }
}

mutual {
  sig mailClient : (~SMTPServer, (1:String, 2:[String], 3:String, 4:String)) ~> ()
  fun mailClient(c, mail_form) {
  var domain = extractDomain(mail_form.1);
  var c = send(domain, select HELO c);
  print("C: HELO " ^^ domain);
  offer (c) {
      case REJECT(c) ->
        mailClient(c, mail_form)

      case ACCEPT(c) ->
        outerClient(c, mail_form)
    }
  }

  fun outerClient(c, mail_form) {
    var c = send(mail_form.1, select MAIL c);
    print("C: MAIL FROM:<" ^^ mail_form.1 ^^ ">");

    offer (c) {
      case REJECT(c) ->
        outerClient(c, mail_form)

      case ACCEPT(c) ->
        rcptLoopClient(c, mail_form)
    }
  }

  fun addData(c, mail_form) {
    var c = send(mail_form.3, select DATA c);
    var c = send(mail_form.4, c);
    var c = select QUIT c;
    wait(c);
    ()
  }

  # Having added 1 recipient, add all the remaining, doesn't matter, if they are rejected or not.
  fun addOtherRecipients(c, mail_form) {
     switch(mail_form.2) {
        case []    -> addData(c, mail_form) # Recipients exhausted.
        case x::xs ->
                      var c = send(x, select RCPT c);
                      print("C: RCPT TO:<" ^^ x ^^ ">");
                      offer (c) {
                                case REJECT(c) ->
                                      var mail_form = (mail_form.1, xs, mail_form.3, mail_form.4);
                                      addOtherRecipients(c, mail_form)
                                case ACCEPT(c) ->
                                      var mail_form = (mail_form.1, xs, mail_form.3, mail_form.4);
                                      addOtherRecipients(c, mail_form)
                      }

    }
  }

  # Mail_form.2 MUST NOT be empty list. In real application, where values of mail_form are not hardwired, it should
  # be checked in advance, before a type session, that they are not empty. Or if a reject is received, a
  # real-time prompt to enter a new value should appear. In this hardwired case, we assume it is never empty
  # and all the recipients are valid.

  fun rcptLoopClient(c, mail_form) {
    switch(mail_form.2) {
      case x::xs -> var c = send(x, select RCPT c);
                    print("C: RCPT TO:<" ^^ x ^^ ">");
                    offer(c) {
                      case REJECT(c) ->
                                  var mail_form = (mail_form.1, xs, mail_form.3, mail_form.4);
                                  rcptLoopClient(c, mail_form)
                      case ACCEPT(c) ->
                                  var mail_form = (mail_form.1, xs, mail_form.3, mail_form.4);
                                  addOtherRecipients(c, mail_form)
                      }
      }
  }
}

sig startCommunication : (String, [String], String, String) ~> ()
fun startCommunication(sender, recipients, subject, message) {
    var mail_form = (sender, recipients, subject, message);
    mailClient(forkSync(mailServer), mail_form)
}

startCommunication("smtp@links.co.uk", ["starlight@dust", "something@someOther.com"],
                   "Links SMTP Client Test", "Hello\nHow are you?")
