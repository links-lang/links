typename Shop = [&|Add:?String.Shop, Checkout:?Int.?String.End|&];


sig waitForClient : (Shop) ~> ()
fun waitForClient(s) client {
  offer(s) {
    case Add(s) ->
      var (item, s) = receive(s);
      appendChildren(stringToXml("Book name received: " ^^ item), getNodeById("items"));
      waitForClient(s)

    case Checkout(s) ->
      var (card, s)    = receive(s);
      appendChildren(stringToXml(", card number received: " ^^ intToString(card)), getNodeById("items"));
      var (address, s) = receive(s);
      appendChildren(stringToXml(", address received: " ^^ address), getNodeById("items"));
      ()
  }
}

sig orderBooks : (~Shop) ~> ()
fun orderBooks(c) client {
  var c = send("Alice in Wonderland", select Add c);
  var _ = send("Summerhall Square", send(8753, select Checkout c));
  ()
}

fun mainPage(_, clientLoc) {
  var accessPoint = newAP(clientLoc);
  var _ = spawnAt(clientLoc, { waitForClient(accept(accessPoint)) } );

  page
    <html>
      <head><title>From Academic Papers</title></head>
      <body>
        <form l:onsubmit="{orderBooks(request(accessPoint))}">
        <h3>Example 1 from "Linear type theory for asynchronous session types":</h3>
        <button type="submit">Start communication</button>
        </form>
      <p id="items"></p>
      </body>
    </html>
}

fun main() server {
  addRoute("/", mainPage);
  servePages();
}

main()
