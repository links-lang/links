# Representation that Book, Audio_Visual and Gadget are the subtypes of Product.
# In this code, it does not make difference, since they all are Strings, but suppose
# at some later point it will be possible to distinguish them and assign different features.

typename Book           = String;
typename Audio_Visual   = String;
typename Gadget         = String;
typename Product        = [| Book:Book | Audio_Visual:Audio_Visual | Gadget:Gadget|];


# Again, it is possible to directly put Int in the session type. This bit only reflects the paper better.
typename Card = Int;
typename Lunchers = Card;


# Address consists of a street, house number and a city (my interpretation).
typename Address = (street:String, houseNo:Int, city:String);

# My interpretation. Used for returning a sensible value to main().
typename OrderSummary = String;

# Session types for mother's choice.
typename Shop = mu a.[&|Add:?Product.a, Remove:?Product.a, Checkout:?Card.?Address.![OrderSummary].EndBang|&];

# Session types for son's choice.
typename Son = [&|Choice:!Product.EndBang|&];


# Removes given element.
sig removeProduct : (Product, [Product]) ~> ([Product])
fun removeProduct(item, products) client
{
        switch (products) {
                case []    -> []
                case x::xs -> if (item == x) xs
                              else x::removeProduct(item, xs)
  }
}

# Convinces Links that any Product is also a String.
fun turnProductToString(product) client
{
        switch(product) {
                case Book(s) -> s
                case Audio_Visual(s) -> s
                case Gadget(s) -> s
        }
}


#sig shipper : (?(?String.c).!String.!c.End) ~> ()
fun shipper(c) {
  <| c(s).s(address).
     c["Street: " ^^ address.street ^^ ", House number: " ^^
intToString(address.houseNo) ^^ ", City: " ^^ address.city].
     c[s].c[] |>
}

# Turns a list of products into a single string.
sig concatenateProducts : ([Product], String) ~> (String)
fun concatenateProducts(products, fullList) client
{
        switch(products) {
                case [] -> fullList
                case x::xs -> concatenateProducts(xs, (turnProductToString(x) ^^ ". " ^^ fullList))
        }
}

# Turns order summary into a single readable string.
sig summariseOrder : (Int, String, [Product], String) ~> ([String])
fun summariseOrder(card, address, products, removed) client
{
        [concatenateProducts(products, ""), removed, intToString(card), address]
}

# A shop. Accepts orders and allows checkout.
#sig waitForClient : (Shop, [Product], String) ~> ()
fun waitForClient(s, orderedProducts, removedProducts) client
{
 <| offer s {
        case Add -> s(item).{waitForClient(s, item::orderedProducts, removedProducts)}

        case Remove -> s(item).{var updatedList = removeProduct(item, orderedProducts);
                # See if the list is smaller (= an item to be removed was actually in a list).
                if (length(updatedList) < length(orderedProducts))
                        waitForClient(s, updatedList, removedProducts ^^ turnProductToString(item) ^^ ". ")
                else
                        waitForClient(s, orderedProducts, removedProducts)}

        case Checkout -> s(card).
          nu c.({shipper(c)} |
                c[s].c(addressFull).c(s).
                s[summariseOrder(card, addressFull, orderedProducts, removedProducts)].c().s[]) } |>
}

# Waits for signal to be able to choose and picks out the product.
#sig waitForSon : (Son) ~> ()
fun waitForSon(c) client
{
        <| offer c {
                case Choice -> c[Gadget("LED Water Speakers")].c[]
        } |>
}

# Sends a signal that it is time to choose a product.
#sig getSonBook : (~Son) ~> (Product)
fun getSonBook(s) {
        <| Choice s.s(choice).s().{choice} |>
}


# Mom picks out the products, allows the son to do it, goes to checkout.
sig orderBooks : (~Shop) ~> ([String])
fun orderBooks(c) client
{
        var myAddress = (street="Princes Street", houseNo=14, city="Edinburgh");

        <| Add c.c[Book("Alice in Wonderland")].
           Add c.c[Audio_Visual("Hitchhiker's Guide to the Galaxy")].{
           var choice = <| nu s.({waitForSon(s)}|{getSonBook(s)}) |>;
           debug("after choice");

       <| Add c.c[choice].
           Remove c.c[Audio_Visual("Hitchhiker's Guide to the Galaxy")].
           Remove c.c[Book("Rainbow Ponies")].
           Checkout c.c[8753].c[myAddress].c(summary).c().{summary} |> } |>

}

# Creates a new access point and binds the ends of the channel to appropriate functions.
sig main : () ~> ()
fun main() {
        var order = <| nu s.({waitForClient(s, [], "")}|{orderBooks(s)}) |>;

        appendChildren(stringToXml(order!!0), getNodeById("items"));
        appendChildren(stringToXml(order!!1), getNodeById("removed"));
        appendChildren(stringToXml(order!!2), getNodeById("cardNo"));
        appendChildren(stringToXml(order!!3), getNodeById("address"))
}


fun mainPage(_) {
  var pid = spawnClient { receive { case _ -> main() } };
  fun trigger() { pid ! () }
  page
      <html>
      <head><title>From Academic Papers</title></head>
      <body bgcolor="#E6E6FA">
      <form l:onsubmit="{trigger()}">
      <h3>Finished example from "Linear type theory for asynchronous session types":</h3>
      <button type="submit">Start communication</button>
      </form>
      <p><b>Products ordered:</b></p>
      <p id="items"></p>
      <p><b>Products removed:</b></p>
      <p id="removed"></p>
      <p><b>Payment details:</b></p>
      <p id="cardNo">Card number: </p>
      <p id="address">Address: </p>
      </body>
      </html>
}


fun setup() {
  addRoute("/", mainPage);
  servePages()
}

setup()
