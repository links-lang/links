---
config: tests/typed_ir.tests.config
---

Anonymous constant function (#693)
fun (x) {1}
stdout : fun : forall a,b::Row.(a) -b-> Int

Anonymous identity function (#693)
fun (x) {x}
stdout : fun : forall a::(Any,Any),b::Row.(a::Any) -b-> a::Any

Anonymous composition function (#693)
fun (f,g) {fun (x){f (g(x))}}
stdout : fun : forall a::(Any,Any),b::Row,c::(Any,Any),d::(Any,Any),e::Row.((a::Any) -b-> c::Any, (d::Any) -b-> a::Any) -e-> (d::Any) -b-> c::Any

Anonymous application function (#693)
fun (f) {fun (x){f (x)}}
stdout : fun : forall a::(Any,Any),b::Row,c::(Any,Any),d::Row.((a::Any) -b-> c::Any) -d-> (a::Any) -b-> c::Any

XML typing (#693)
fun (x) {<a>{x}</a>}
stdout : fun : forall a::Row.(Xml) -a-> Xml

ConcatMap (#368)
tests/typed_ir/T368.links
filemode : true
stdout : () : ()

Quantifiers on let-bound values (#620)
tests/typed_ir/T620.links
filemode : true
stdout : () : ()

Bound quantifiers in `and` and `all` (#692)
tests/typed_ir/T692.links
filemode : true
stdout : () : ()

Bound quantifiers in a query (#694)
tests/typed_ir/T694.links
filemode : true
stdout : fun : forall a::Row,b::Row(Any,Base).() -a-> [(|b::(Any,Base))]

Curry (#574)
tests/typed_ir/T574.links
filemode : true
stdout : () : ()

Unsafe type signatures #1 (#691)
tests/typed_ir/T691a.links
filemode : true
exit : 1
stderr : @..*

Unsafe type signatures #2 (#691)
tests/typed_ir/T691b.links
filemode : true
exit : 1
stderr : @..*

Wild effect compatibility #1 (#697)
tests/typed_ir/T697a.links
filemode : true
stdout : () : ()

Wild effect compatibility #2 (#697)
tests/typed_ir/T697b.links
filemode : true
stdout : () : ()

asList (#698)
tests/typed_ir/T698.links
filemode : true
stdout : () : ()

isInt (#575)
sig isInt : (String) -> Bool fun isInt (x) { x =~ /-?[0-9]+$/ }
stdout : () : ()
