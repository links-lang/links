Identity handler (1)
{ handle(42) {case Return(x) -> x} }
stdout : 42 : Int
flags : --enable-handlers -e

Identity handler (2)
handle(42) {case Return(x) -> x}
stdout : 42 : Int
flags : --enable-handlers -e

Listify handler (1)
{ handle(42) {case Return(x) -> [x]} }
stdout : [42] : [Int]
flags : --enable-handlers -e

Listify handler (2)
handle(42) {case Return(x) -> [x]}
stdout : [42] : [Int]
flags : --enable-handlers -e

Listify handler (3)
{ handle([42, 41, 40, 39]) {case Return(x) -> [x]} }
stdout : [[42, 41, 40, 39]] : [[Int]]
flags : --enable-handlers -e

Listify handler (4)
handle([42, 41, 40, 39]) {case Return(x) -> [x]}
stdout : [[42, 41, 40, 39]] : [[Int]]
flags : --enable-handlers -e

Top level operation invocation
{ do Foo }
stderr : @.
exit : 1
flags : --enable-handlers -e

Return invocation (1)
fun() { do Return }
stderr : @.
exit : 1
flags : --enable-handlers -e

Return invocation (2)
{ fun() { do Return } }
stderr : @.
exit : 1
flags : --enable-handlers -e

Operation invocation sugar (1)
{ fun() { do Foo } }
stdout : fun : () {Foo:() {}-> a|_}-> a
flags : --enable-handlers -e

Operation invocation sugar (2)
{ fun() { do Foo() } }
stdout : fun : () {Foo:() {}-> a|_}-> a
flags : --enable-handlers -e

Operation invocation sugar (3)
{ fun() { do Foo(()) } }
stdout : fun : () {Foo:(()) {}-> a|_}-> a
flags : --enable-handlers -e

Operation invocation sugar (4)
fun() { do Foo }
stdout : fun : () {Foo:() {}-> a|_}-> a
flags : --enable-handlers -e

Operation invocation sugar (5)
fun() { do Foo() }
stdout : fun : () {Foo:() {}-> a|_}-> a
flags : --enable-handlers -e

Operation invocation sugar (6)
fun() { do Foo(()) }
stdout : fun : () {Foo:(()) {}-> a|_}-> a
flags : --enable-handlers -e

Exception handling (1)
{ handle({do Fail; 42}) {case Fail(_) -> Nothing : Maybe(Int) case Return(x) -> Just(x) : Maybe(Int)} }
stdout : Nothing : Maybe (Int)
flags : --enable-handlers -e

Exception handling (2)
{ handle(42) {case Fail(_) -> Nothing : Maybe(Int) case Return(x) -> Just(x) : Maybe(Int)} }
stdout : Just(42) : Maybe (Int)
flags : --enable-handlers -e

Exception handling (3)
{ handle({var _ = do Fail : Zero; 42}) {case Fail(k) -> k(42) : Either(String,Int) case Return(x) -> Right(x) : Either(String, Int)} }
stderr : @.
exit : 1
flags : --enable-handlers -e

Exception handling (4)
handle({do Fail; 42}) {case Fail(_) -> Nothing : Maybe(Int) case Return(x) -> Just(x) : Maybe(Int)}
stdout : Nothing : Maybe (Int)
flags : --enable-handlers -e

Exception handling (5)
handle(42) {case Fail(_) -> Nothing : Maybe(Int) case Return(x) -> Just(x) : Maybe(Int)}
stdout : Just(42) : Maybe (Int)
flags : --enable-handlers -e

Exception handling (6)
handle({var _ = do Fail : Zero; 42}) {case Fail(k) -> k(42) : Either(String,Int) case Return(x) -> Right(x) : Either(String, Int)}
stderr : @.
exit : 1
flags : --enable-handlers -e

Binary choice handling (1)
{ handle({ var x = if (do Choose) 40 else 20; var y = if (do Choose) 2 else -20; x + y }) {case Choose(k) -> k(true) ++ k(false) case Return(x) -> [x]} }
stdout : [42, 20, 22, 0] : [Int]
flags : --enable-handlers -e

Binary choice handling (2)
handle({ var x = if (do Choose) 40 else 20; var y = if (do Choose) 2 else -20; x + y }) {case Choose(k) -> k(true) ++ k(false) case Return(x) -> [x]}
stdout : [42, 20, 22, 0] : [Int]
flags : --enable-handlers -e

Deep continuation escape (1)
{ fromJust(handle({ do Escape; print("Back in action"); do Escape}) { case Escape(k) -> Just(k) case Return(_) -> Nothing })(()) }
stdout : @.
exit : 0
flags : --enable-handlers -e

Deep continuation escape (2)
fromJust(handle({ do Escape; print("Back in action"); do Escape}) { case Escape(k) -> Just(k) case Return(_) -> Nothing })(())
stdout : @.
exit : 0
flags : --enable-handlers -e

Type-and-effect signature for deep handler (1)
sig allChoices : (Comp({Choose:Bool|e},a)) {Choose{_}|e}~> [a] fun allChoices(m) {handle(m()) {case Return(x) -> [x] case Choose(k) -> k(true) ++ k(false) }}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for deep handler (2)
sig allChoices : (Comp({Choose:Bool|e},a)) -> Comp({Choose{_}|e},[a]) fun allChoices(m)() {handle(m()) {case Return(x) -> [x] case Choose(k) -> k(true) ++ k(false)}}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for deep handler (3)
sig allChoices : (Comp({Choose:Bool|e},a)) -> Comp({Choose- |e},[a]) fun allChoices(m)() {handle(m()) {case Return(x) -> [x] case Choose(k) -> k(true) ++ k(false)}}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for deep handler (4)
sig allChoices : (Comp({Choose:Bool|e},a)) -> Comp({Choose{_}|e},[a]) handler allChoices {case Return(x) -> [x] case Choose(k) -> k(true) ++ k(false)}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for deep handler (5)
sig allChoices : (Comp({Choose:Bool|e},a)) -> Comp({Choose- |e},[a]) handler allChoices {case Return(x) -> [x] case Choose(k) -> k(true) ++ k(false)}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for shallow handler (1)
sig allChoices : (Comp({Choose:Bool|e},a)) {Choose{_}|e}~> [a] fun allChoices(m) {shallowhandle(m()) {case Return(x) -> [x] case Choose(k) -> allChoices(fun() {k(true)}) ++ allChoices(fun(){k(false)}) }}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for shallow handler (2)
sig allChoices : (Comp({Choose:Bool|e},a)) -> Comp({Choose{_}|e},[a]) fun allChoices(m)() {shallowhandle(m()) {case Return(x) -> [x] case Choose(k) -> allChoices(fun(){k(true)})() ++ allChoices(fun(){k(false)})()}}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for shallow handler (3)
sig allChoices : (Comp({Choose:Bool|e},a)) -> Comp({Choose- |e},[a]) fun allChoices(m)() {shallowhandle(m()) {case Return(x) -> [x] case Choose(k) -> allChoices(fun(){k(true)})() ++ allChoices(fun(){k(false)})()}}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for shallow handler (4)
sig allChoices : (Comp({Choose:Bool|e},a)) -> Comp({Choose{_}|e},[a]) shallowhandler allChoices {case Return(x) -> [x] case Choose(k) -> allChoices(fun(){k(true)})() ++ allChoices(fun(){k(false)})()}
stdout : () : ()
flags : --enable-handlers -e

Type-and-effect signature for shallow handler (5)
sig allChoices : (Comp({Choose:Bool|e},a)) -> Comp({Choose- |e},[a]) shallowhandler allChoices {case Return(x) -> [x] case Choose(k) -> allChoices(fun(){k(true)})() ++ allChoices(fun(){k(false)})()}
stdout : () : ()
flags : --enable-handlers -e

Type inference for deep handler
fun() { handle({do A; do B}) { case A(k) -> k(()) case Return(x) -> x } }
stdout : fun : () {A{_},B:() {}-> b|_}~> b
flags : --enable-handlers -e

Soundness
{fun mapk(m) { handle(m()) {case Map(p,k) -> map(k,p) case Return(x) -> [x]} } }
stderr : @.
exit : 1
flags : --enable-handlers -e

Deep state handling (1)
{fun state(m) { handle(m()) { case Get(k) -> fun(s) { k(s)(s) } case Put(p,k) -> fun(s) { k(())(p) } case Return(x) -> fun(s) { x } } } fun runState(s0, c) { var f = state(c); f(s0) } runState(2, fun() { var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get }) }
stdout : 6 : Int
flags : --enable-handlers -e

Deep state handling (2)
{fun state(m)(s) { handle(m())(s -> s) { case Get(k) -> k(s,s) case Put(p,k) -> k((),p) case Return(x) -> x } } fun runState(s0, c) { state(c)(s0) } runState(2, fun() { var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get }) }
stdout : 6 : Int
flags : --enable-handlers -e

Deep state handling (3)
handle({ var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get })(2 -> s) { case Get(k) -> k(s,s) case Put(p,k) -> k((),p) case Return(x) -> x }
stdout : 6 : Int
flags : --enable-handlers -e

Shallow state handling (1)
{fun state(m)(s) { shallowhandle(m()) { case Get(k) -> state(fun(){k(s)})(s) case Put(p,k) -> state(fun(){k(())})(p) case Return(x) -> x}} fun runState(s0, c) { var f = state(c); f(s0) } runState(2, fun() { var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get }) }
stdout : 6 : Int
flags : --enable-handlers -e

Shallow state handling (2)
{ fun simpleState(m)(s) { shallowhandle(m()) { case Get(k) -> simpleState(fun() { k(s) })(s) case Put(s,k) -> simpleState(fun() { k(()) })(s) case Return(x) -> x } } fun count() { var n = do Get; if (n == 0) {n} else {do Put(n-1); count() }} simpleState(count)(10) }
stdout : 0 : Int
flags : --enable-handlers -e

Shadowing handler parameter (1)
{ handle({ var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get })(0 -> s) { case Get(k) -> k(s,s) case Put(s,k) -> k((),s) case Return(x) -> x } }
stdout : 2 : Int
flags : --enable-handlers -e

Shadowing handler parameter (2)
{ handle({ var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get })(0 -> s) { case Get(k) -> k(s,s) case Put(p as s,k) -> k((),s) case Return(x) -> x } }
stdout : 2 : Int
flags : --enable-handlers -e

Shadowing handler parameter (3)
{ handle({ var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get })(0 -> s) { case Get(k) -> k(s,s) case Put(s as p,k) -> k((),s) case Return(x) -> x } }
stdout : 2 : Int
flags : --enable-handlers -e

Operation parameter pattern-matching (1)
ignore(fun (m) { handle(m()) { case Op1(_) -> 1 case Op2(_,k) -> 2 case Op3(_,_) -> 3 case Return(x) -> x } })
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (2)
ignore(fun(m) { handle(m()) { case Op1(p as q,k) -> k(q) case Op2(s,t as w,k) -> k(t) case Op3(a,b,c as d,_) -> d case Return(x) -> x } })
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (3)
ignore(fun(m) { handle(m()) { case Op1(1,k) -> k(1) case Op2(s,2,k) -> k(s) case Op3(a,b,3,_) -> 3 case Return(x) -> x } })
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (4)
ignore(fun(m) { handle(m()) { case Op1(1.0,k) -> k(1.0) case Op2(s,2.0,k) -> k(s) case Op3(a,b,3.0,_) -> 3.0 case Return(x) -> x } })
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (5)
ignore(fun(m) { handle(m()) { case Op1(Alice,k) -> k(1) case Op2(s,Bob,k) -> k(s) case Op3(a,b,Jenny,_) -> a case Return(x) -> x } })
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (6)
ignore(fun(m) { handle(m()) { case Op1((_,y),k) -> k(y) case Op2((x,y,z),k) -> k(z) case Op3(_,(a,b,c),_) -> a case Return(x) -> x } })
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (7)
fun(m) { handle(m()) { case Move(Alice, _) -> 'A' case Move(Bob, _) -> 'B' case Move(_,_) -> 'U' case Return(x) -> x } }
stdout : fun : (() {Move:([|Alice|Bob|_|]) {}-> _|c}~> Char) {Move{_}|c}~> Char
flags : --enable-handlers -e

Operation parameter pattern-matching (8)
handle(do Move(Alice)) { case Move(Alice, _) -> 'A' case Move(Bob, _) -> 'B' case Move(_,_) -> 'U' case Return(x) -> x }
stdout : 'A' : Char
flags : --enable-handlers -e

Operation parameter pattern-matching (9)
handle(do Move(John)) { case Move(Alice, _) -> 'A' case Move(Bob, _) -> 'B' case Move(_,_) -> 'U' case Return(x) -> x }
stdout : 'U' : Char
flags : --enable-handlers -e

Pattern-matching on continuation parameter (1)
ignore(fun(m) { handle(m()) { case Op(_) -> 0 case Return(x) -> x } })
stdout : () : ()
flags : --enable-handlers -e

Pattern-matching on continuation parameter (2)
ignore(fun(m) { handle(m()) { case Op(k as f) -> f(1) case Return(x) -> x } })
stdout : () : ()
flags : --enable-handlers -e

Pattern-matching on continuation parameter (3)
ignore(fun(m) { handle(m()) { case Op(2) -> f(1) case Return(x) -> x } })
stderr : @.
exit : 1
flags : --enable-handlers -e

Value parameter pattern-matching (1)
ignore(fun(m) { handle(m()) { case Op1(k) -> 1 case Return(_) -> 0 } })
stdout : () : ()
flags : --enable-handlers -e

Value parameter pattern-matching (2)
ignore(fun(m) { handle(m()) { case Op1(k) -> 1 case Return(x as y) -> y } })
stdout : () : ()
flags : --enable-handlers -e

Value parameter pattern-matching (3)
ignore(fun(m) { handle(m()) { case Op1(k) -> 1 case Return(10) -> 10 } })
stdout : () : ()
flags : --enable-handlers -e

Value parameter pattern-matching (4)
ignore(fun(m) { handle(m()) { case Op1(k) -> 1 case Return(100.0) -> 0 } })
stdout : () : ()
flags : --enable-handlers -e

Value parameter pattern-matching (5)
ignore(fun(m) { handle(m()) { case Op1(k) -> 1 case Return(Alice) -> 0 } })
stdout : () : ()
flags : --enable-handlers -e

Value parameter pattern-matching (6)
ignore(fun(m) { handle(m()) { case Op1(k) -> 1 case Return((x,y)) -> 0 } })
stdout : () : ()
flags : --enable-handlers -e

Pattern-matching on handler parameter (1)
handle(true)(100 -> _) { case Return(x) -> x }
stdout : true : Bool
flags : --enable-handlers -e

Pattern-matching on handler parameter (2)
handle(true)(100 -> 100) { case Return(x) -> x}
stdout : true : Bool
flags : --enable-handlers -e

Pattern-matching on handler parameter (2)
handle(true)(99 -> 100) { case Return(x) -> x}
stderr : @.
exit : 1
flags : --enable-handlers -e

Pattern-matching on handler parameter (3)
handle(true)(Foo(42) -> Foo(s)) { case Return(_) -> s}
stdout : 42 : Int
flags : --enable-handlers -e

Pattern-matching on handler parameter (4)
handle(true)(Bar(42) -> Foo(s)) { case Return(_) -> s}
stderr : @.
exit : 1
flags : --enable-handlers -e

Pattern-matching on handler parameter (5)
handle(true)((2,1) -> (x,y)) { case Return(_) -> x + y}
stdout : 3 : Int
flags : --enable-handlers -e

Pattern-matching on handler parameter (6)
handle(true)("Hello" -> "Hello") { case Return(x) -> x}
stdout : true : Bool
flags : --enable-handlers -e

Pattern-matching on handler parameter (7)
handle(true)((a=44,b=(-2)) -> (a=x, b=y)) { case Return(_) -> x + y}
stdout : 42 : Int
flags : --enable-handlers -e

Pattern-matching on handler parameter (8)
handle(true)((a=44,b=(-2)) -> r) { case Return(_) -> r.a + r.b}
stdout : 42 : Int
flags : --enable-handlers -e

Deep Handler composition
handler h1 { case Op1(k) -> k(1) case Return(x) -> x } handler h2 { case Op2(k) -> k(2) case Return(x) -> x } handler h3 { case Op3(k) -> k(3) case Return(x) -> x } h1(h2(h3(fun() { do Op1 + do Op2 + do Op3 })))()
stdout : 6 : Int
flags : --enable-handlers -e

Type annotation on deep continuation parameter
handler h1 { case Op(k : ((Int) {Op{_}|_}~> Int)) -> k(1) case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Type annotation on shallow continuation parameter
shallowhandler h1 { case Op(k : ((Int) {Op:Int|_}~> Int)) -> h1(fun() { k(1) })() case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Shallow addition with a single recursive handler
{ shallowhandler h1 { case One(k) -> h1(fun() { k(1) })() case Return(x) -> x - 1} h1(fun() { do One + do One })() }
stdout : 1 : Int
flags : --enable-handlers -e

Shallow addition with two mutual recursive handlers
{ shallowhandler h1 { case One(k) -> h1(fun() { k(1) })() case Return(x) -> x} shallowhandler h2 { case One(k) -> h1(fun() { k(2) })() case Return(x) -> x} h2(fun() { do One + do One })() }
stdout : 3 : Int
flags : --enable-handlers -e

Shallow handler composition
{ shallowhandler h1 { case Op1(k) -> h1(fun() { k(1) })() case Return(x) -> x } shallowhandler h2 { case Op2(k) -> h2(fun() { k(2) })() case Return(x) -> x } h1(h2(fun() { do Op1 + do Op2 }))() }
stdout : 3 : Int
flags : --enable-handlers -e

Type ascription, parameterised handlers (1)
{ handler(_ : Int)(_ : Float)(_ : String) { case Op(p,k) -> k(p)(42)(3.14)("Foo") case Return(x) -> x } }
stdout : fun : (Int) -> (Float) -> (String) -> (() {Op:(d) {}-> d|e}~> f) -> () {Op{_}|e}~> f
flags : --enable-handlers -e

Type ascription, parameterised handlers (2)
{ handler(_ : Float,_ : String,_ : Int) { case Op(p,k) -> k(p)(3.14,"Bar",99) case Return(x) -> x } }
stdout : fun : (Float, String, Int) -> (() {Op:(b) {}-> b|c}~> d) -> () {Op{_}|c}~> d
flags : --enable-handlers -e

Instantiate.ArityMismatch #132 (RESOLVED)
sig f : (() {Foo:Int|a}~> b) {Foo{_}|a}~> b fun f(m) { error("N/A") } fun g(m) { var x = f(m); x }
stdout : () : ()
flags : --enable-handlers -e

Operation polymorphism
sig catch : (() {Fail:forall a.a |e}~> b) {Fail{_} |e}~> Maybe(b) fun catch(m) { handle(m()) { case Fail(k) -> Nothing case Return(x) -> Just(x) } } catch(fun() { 42 })
stdout : Just(42) : Maybe (Int)
flags : --enable-handlers -e

Generalise (1)
gen0(fun(m)() { handle(m()) { case Foo(k) -> 42 case Return(x) -> x } }(fun(){42}))
stdout : fun : Comp ({ |a },Int)
flags : --enable-handlers -e

Generalise (2)
gen0(fun(m)() { handle(m()) { case Foo(k : ((()) {Foo- |_}~> Int)) -> 42 case Return(x) -> x } }(fun(){42}))
stdout : fun : Comp ({ |a },Int)
flags : --enable-handlers -e

Recursive nesting of deep handlers
{ fun h1(m,h) { handle(m()) { case Foo(k) -> h(fun() { k(()) },h1) case Return(x) -> x } } fun h2(m,h) { handle(m()) { case Foo(k) -> h(fun() { k(()) },h2) case Return(x) -> x } } h1(fun(){42},h2) }
stdout : 42 : Int
flags : --enable-handlers -e

Parameterised handler with multiple parameters (1)
handle({do A; do B; do C; do D})(0 -> a, 1 -> b, 2 -> c, 3 -> d) { case A(k) -> k((),a+1,b,c,d) case B(k) -> k((),a,b+1,c,d) case C(k) -> k((),a,b,c+1,d) case D(k) -> k((),a,b,c,d+1) case Return(_) -> (a,b,c,d) }
stdout : (1, 2, 3, 4) : (Int, Int, Int, Int)
flags : --enable-handlers -e

Parameterised handler with multiple parameters (2)
handle({do A; do B; do C; do D})(0 -> a, false -> b, (true,0) -> (c0,c1) as c, "Hello" -> d) { case A(k) -> k((),a+1,b,c,d) case B(k) -> k((),a,not(b),c,d) case C(k) -> k((),a,b,(not(c0), c1+1),d) case D(k) -> k((),a,b,c,d ^^ " World") case Return(_) -> (a,b,c,d) }
stdout : (1, true, (false, 1), "Hello World") : (Int, Bool, (Bool, Int), String)
flags : --enable-handlers -e

Effect type sugar (1)
fun(g : (() {A:a,B:(a) -> b|_}~> b)) { g }(fun(){error("N/A")})
stdout : fun : () {A:() {}-> a,B:(a) {}-> b|_}~> b
flags : --enable-handlers -e

Effect type sugar (2)
fun(g : (() {:a|_}~> a)) { g }(fun(){error("N/A")})
stdout : fun : () {:a|_}~> a
flags : --enable-handlers -e

Effect type sugar (3)
fun(g : (() {wild:()|_}-> a)) { g }(fun(){error("N/A")})
stdout : fun : () ~> _
flags : --enable-handlers -e

Implicit return case (1)
handle(42) { }
stdout : 42 : Int
flags : --enable-handlers -e

Implicit return case (2)
handle(do Op) { case Op(resume) -> resume(true) }
stdout : true : Bool
flags : --enable-handlers -e

Omission of resumption for nullary operations (1)
handle(do Foo) { case Foo -> 5 }
stdout : 5 : Int
flags : --enable-handlers -e

Omission of resumption for nullary operations (2)
handle(do Foo) { case Foo() -> 6 }
stdout : 6 : Int
flags : --enable-handlers -e

Omission of resumption for nullary operations (3)
fun(m) { handle(m()) { case Foo -> 5 } }
stdout : fun : (() {Foo:() {}-> _|b}~> Int) {Foo{_}|b}~> Int
flags : --enable-handlers -e

Examples
./examples/handlers/tests.links
stdout : () : ()
ignore : Depends on modules (flags : --enable-handlers -m --path=examples/handlers)