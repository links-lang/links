Nested variant matching [1]
switch (A (A)) { case A (A) -> 0 case A (B) -> 1 }
stdout : 0 : Int

Nested variant matching [2]
switch (A (A)) { case A (B) -> 0 case A (A) -> 1 }
stdout : 1 : Int

Constant patterns [1]
switch (A (1)) { case A (0) -> 0 case A (1) -> 1 }
stdout : 1 : Int

Constant patterns [2]
switch (A (1)) { case A (0) -> 0 case _ -> 1 }
stdout : 1 : Int

Constant patterns [3]
switch (A (1)) { case A (0) -> 0 case A (x) -> 1 }
stdout : 1 : Int

Default pattern
switch (A) { case _ -> 0 }
stdout : 0 : Int

Integer pattern
switch (0) { case x -> x+1 }
stdout : 1 : Int

List pattern
switch (A ([])) { case A (_::_) -> 0 case A ([]) -> 1 }
stdout : 1 : Int

Open record pattern
fun (r) {switch (r) {case (l=l|s) -> s}}
stdout : @fun : \(\(l:_\|([a-z])::Any\)\) -> \(l-\|\1::Any\)

HasType pattern [1]
switch (1) {case (0:Int) -> 0 case (1:Int) -> 1}
stdout : 1 : Int

HasType pattern [2]
switch (1) {case (1:Int) -> 1 case (x:String) -> 0}
stderr : @..*
exit : 1

HasType pattern [3]
switch (A) {case A -> 0 case -A:[|B:[|C:String|]|] -> 1}
stdout : 0 : Int

HasType pattern [4]
switch (A) {case A -> 0 case B(C(x:String)) -> 1}
stdout : 0 : Int

As pattern
switch (1) {case 1 as x -> x}
stdout : 1 : Int

Absence typing in variant patterns
fun f(x) {switch (x) {case A(B) -> B case A(-B as y) -> A(f(y))}} f
stdout : @fun : \(\[||\(mu ([a-z]+) . A:\[\|B:\(\)\|\1\|\]\)|\]\) -> mu ([a-z]+) . \[\|A:\2 \| B:()\|[a-z]+\|\]

Redundant pattern [1]
fun (x) { switch (x) { case x -> x case A -> A }}
stderr : @..*
exit : 1

Redundant pattern [2]
fun (x) { switch (x) { case x -> A(1) case A -> A('2') } }
stderr : @..*
exit : 1

Redundant pattern [3]
fun (x) { switch (x) { case x -> x case A -> A }}
stderr : @..*
exit : 1

Redundant pattern [4]
fun (x) {switch (x) { case(A(B(C(1,2,3)))) -> 0 case(A(B(C(1,2,3)))) -> 1}}
stderr : @..*
exit : 1

Type-based redundant pattern
fun (x) {switch (x) { case(true) -> 0 case(false) -> 1 case(y) -> 2}}
stdout : fun : (Bool) -> Int

Pattern matching twice against the same expression
fun (x) {(switch (x) {case A -> 0 case _ -> 1}) + (switch (x) {case A -> 0 case _ -> 1})}
stdout : @fun : \(\[\|A\|_\|\]\) -> Int
