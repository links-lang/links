#!/usr/bin/env python3

links = './links'

import sys, re, time
from subprocess import Popen, PIPE

successes = failures = ignored = 0
TIMEOUT = 15 # seconds before a test is timed out.

def FAIL(name, msg):
    return ('  error: %s' % name,'      (%s)' % msg)

def OK(name):
    global successes
    successes+=1
    print(' SUCCESS: %s' % name)

def parse(stream):
    """Read test information separated by blank lines.  The first line
    is the test name; the second is the test code; the remaining lines
    are auxiliary options"""
    def tests():
        tests = []
        for line in stream.readlines():
            if not str.strip(line) and tests[-1]:
                yield tests
                tests = []
            else:
                tests.append(line)
        yield tests
    for test in tests():
        if not test:
            print('WARNING: empty test', file=sys.stderr)
        else:
            name = str.strip(test.pop(0))
            code = str.strip(test.pop(0))
            opts = dict([str.split(str.rstrip(line), ' : ', 1) for line in test])
            yield name, code, opts

def check_expected(name, item, got, expected, errors):
    """Check some data against an expected value or predicate.  If it
    matches, return True.  Otherwise, display an error and return
    False.
    """
    got, expected = got.rstrip(), expected.rstrip()
    if expected.startswith('@'):
        if not re.match(expected[1:], got, re.DOTALL):
            errors.append(FAIL(name, "Unexpected %s: expected `%s' (regex); got `%s'" %
                               (item, expected[1:], got)))
            return False
        else:
            return True
    elif expected != got:
        errors.append(FAIL(name, "Unexpected %s: expected `%s'; got `%s'" % (item, expected, got)))
        return False
    else:
        return True

def evaluate(name, code, stdout='', stderr='', exit = '0', flags='-e', env = None, filemode='', args='', ignore = None):
    if filemode.startswith('true') :
        proc = Popen([links, code], stdout=PIPE, stderr=PIPE, env=env)
    elif filemode.startswith('args'):
        arg_array = str.split(args, ' ')
        popen_list = [links] + arg_array + [code]
        proc = Popen(popen_list, stdout=PIPE, stderr=PIPE, env=env)
    else:
        proc = Popen([links] +  flags.split(" ") + [code], stdout=PIPE, stderr=PIPE, env=env)
    passed = True
    errors = []
    for i in range(0, TIMEOUT*100):
        rc = proc.poll()
        if rc != None:
            passed &= check_expected(name, 'return code', str(rc), exit, errors)
            passed &= check_expected(name, 'stdout', proc.stdout.read().decode('ascii'), stdout, errors)
            passed &= check_expected(name, 'stderr', str(proc.stderr.read().decode('ascii')), stderr, errors)
            if passed:
                OK(name)
            else:
                if ignore != None:
                    global ignored
                    ignored += 1
                    print('?IGNORED: %s (%s)' % (name, ignore))
                else:
                    global failures
                    failures += 1
                    print('!FAILURE: %s' % name)
                    for i, j in errors:
                        print(i)
                        print(j)
            return
        else:
            time.sleep(0.01)
    failures += 1
    print('!FAILURE: %s [TIMED OUT]' % name)

def main():
    try:
        filename = sys.argv[1]
    except IndexError:
        raise SystemExit('Usage: run <filename>')
    for name, code, opts in parse(open(filename, 'r')):
        evaluate(name, code, **opts)
    print("%d failures (+%d ignored)\n%d successes\n" % (failures, ignored, successes))
    if failures > 0:
        sys.exit(1)
    else:
        sys.exit(0)

if __name__ == '__main__':
    main()
